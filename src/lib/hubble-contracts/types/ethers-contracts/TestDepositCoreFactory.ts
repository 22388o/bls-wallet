/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Signer, BigNumberish} from "ethers";
import {Provider, TransactionRequest} from "@ethersproject/providers";
import {Contract, ContractFactory, Overrides} from "@ethersproject/contracts";

import {TestDepositCore} from "./TestDepositCore";

export class TestDepositCoreFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    maxSubtreeDepth: BigNumberish,
    overrides?: Overrides
  ): Promise<TestDepositCore> {
    return super.deploy(maxSubtreeDepth, overrides || {}) as Promise<
      TestDepositCore
    >;
  }
  getDeployTransaction(
    maxSubtreeDepth: BigNumberish,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(maxSubtreeDepth, overrides || {});
  }
  attach(address: string): TestDepositCore {
    return super.attach(address) as TestDepositCore;
  }
  connect(signer: Signer): TestDepositCoreFactory {
    return super.connect(signer) as TestDepositCoreFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestDepositCore {
    return new Contract(address, _abi, signerOrProvider) as TestDepositCore;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maxSubtreeDepth",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "babyTrees",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "babyTreesLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "back",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "depositCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "front",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256"
      }
    ],
    name: "getQueue",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "paramMaxSubtreeSize",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "queue",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "bytes32",
        name: "depositLeaf",
        type: "bytes32"
      }
    ],
    name: "testInsertAndMerge",
    outputs: [
      {
        internalType: "uint256",
        name: "gasCost",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "readySubtree",
        type: "bytes32"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }
];

const _bytecode =
  "0x608060405260018055600060025560006004556000600555600260065534801561002857600080fd5b5060405161043d38038061043d83398101604081905261004791610064565b6001901b6006556100a4565b805161005e8161008d565b92915050565b60006020828403121561007657600080fd5b60006100828484610053565b949350505050565b90565b6100968161008a565b81146100a157600080fd5b50565b61038a806100b36000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638dde0840116100665780638dde0840146100f2578063ba75bbd8146100fa578063c7accaa414610102578063ddf0b0091461010a578063ee9d68ce1461011d57610093565b80630be8fffc146100985780632dfdf0b5146100c1578063425e97f2146100c957806368c4ee65146100d1575b600080fd5b6100ab6100a63660046102c8565b610130565b6040516100b891906102fd565b60405180910390f35b6100ab610142565b6100ab610148565b6100e46100df3660046102c8565b61014e565b6040516100b892919061030b565b6100ab61016c565b6100ab610172565b6100ab610178565b6100ab6101183660046102c8565b61017e565b6100ab61012b3660046102c8565b610190565b60009081526020819052604090205490565b60055481565b60045481565b60008060005a905061015f846101a2565b91505a8103925050915091565b60025481565b60015481565b60065481565b60006020819052908152604090205481565b60036020526000908152604090205481565b6005805460019081019182905560045460008181526003602052604081208590559291015b6001821661023957600119810160009081526003602090815260408083205460001985018452928190205490516101ff93920161030b565b60408051601f19818403018152918152815160209283012060011984016000908152600390935291205560019190911c90600019016101c7565b6004819055600654600554141561028f576000805260036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff5492506102808361029b565b60006004819055600555610294565b600092505b5050919050565b6002805460010190819055600090815260208190526040902055565b80356102c281610330565b92915050565b6000602082840312156102da57600080fd5b60006102e684846102b7565b949350505050565b6102f78161032d565b82525050565b602081016102c282846102ee565b6040810161031982856102ee565b61032660208301846102ee565b9392505050565b90565b6103398161032d565b811461034457600080fd5b5056fea365627a7a72315820927c6ba37dc76816271efccfd89c004633c5c78df39826b81dc89855969dd60f6c6578706572696d656e74616cf564736f6c634300050f0040";
