/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";

interface MockDepositManagerInterface extends ethers.utils.Interface {
  functions: {
    "dequeueToSubmit()": FunctionFragment;
    "reenqueue(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "dequeueToSubmit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reenqueue",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "dequeueToSubmit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reenqueue", data: BytesLike): Result;

  events: {
    "DepositQueued(uint256,bytes)": EventFragment;
    "DepositSubTreeReady(bytes32)": EventFragment;
    "EnqueSubtree(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositQueued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositSubTreeReady"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnqueSubtree"): EventFragment;
}

export class MockDepositManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MockDepositManagerInterface;

  functions: {
    dequeueToSubmit(overrides?: Overrides): Promise<ContractTransaction>;

    "dequeueToSubmit()"(overrides?: Overrides): Promise<ContractTransaction>;

    reenqueue(
      subtreeRoot: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "reenqueue(bytes32)"(
      subtreeRoot: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  dequeueToSubmit(overrides?: Overrides): Promise<ContractTransaction>;

  "dequeueToSubmit()"(overrides?: Overrides): Promise<ContractTransaction>;

  reenqueue(
    subtreeRoot: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "reenqueue(bytes32)"(
    subtreeRoot: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    dequeueToSubmit(overrides?: CallOverrides): Promise<string>;

    "dequeueToSubmit()"(overrides?: CallOverrides): Promise<string>;

    reenqueue(subtreeRoot: BytesLike, overrides?: CallOverrides): Promise<void>;

    "reenqueue(bytes32)"(
      subtreeRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    DepositQueued(pubkeyID: null, data: null): EventFilter;

    DepositSubTreeReady(root: null): EventFilter;

    EnqueSubtree(subtreeRoot: null): EventFilter;
  };

  estimateGas: {
    dequeueToSubmit(overrides?: Overrides): Promise<BigNumber>;

    "dequeueToSubmit()"(overrides?: Overrides): Promise<BigNumber>;

    reenqueue(
      subtreeRoot: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "reenqueue(bytes32)"(
      subtreeRoot: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    dequeueToSubmit(overrides?: Overrides): Promise<PopulatedTransaction>;

    "dequeueToSubmit()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    reenqueue(
      subtreeRoot: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "reenqueue(bytes32)"(
      subtreeRoot: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
