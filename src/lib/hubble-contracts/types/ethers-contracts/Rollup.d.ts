/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides
} from "@ethersproject/contracts";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";

interface RollupInterface extends ethers.utils.Interface {
  functions: {
    "ZERO_BYTES32()": FunctionFragment;
    "accountRegistry()": FunctionFragment;
    "appID()": FunctionFragment;
    "batches(uint256)": FunctionFragment;
    "chooser()": FunctionFragment;
    "create2Transfer()": FunctionFragment;
    "depositManager()": FunctionFragment;
    "deposits(uint256)": FunctionFragment;
    "disputeSignatureCreate2Transfer(uint256,tuple,tuple)": FunctionFragment;
    "disputeSignatureMassMigration(uint256,tuple,tuple)": FunctionFragment;
    "disputeSignatureTransfer(uint256,tuple,tuple)": FunctionFragment;
    "disputeTransitionCreate2Transfer(uint256,tuple,tuple,tuple[])": FunctionFragment;
    "disputeTransitionMassMigration(uint256,tuple,tuple,tuple[])": FunctionFragment;
    "disputeTransitionTransfer(uint256,tuple,tuple,tuple[])": FunctionFragment;
    "getBatch(uint256)": FunctionFragment;
    "invalidBatchMarker()": FunctionFragment;
    "keepRollingBack()": FunctionFragment;
    "massMigration()": FunctionFragment;
    "nextBatchID()": FunctionFragment;
    "paramBlocksToFinalise()": FunctionFragment;
    "paramMaxTxsPerCommit()": FunctionFragment;
    "paramMinGasLeft()": FunctionFragment;
    "paramStakeAmount()": FunctionFragment;
    "submitCreate2Transfer(bytes32[],uint256[2][],uint256[],bytes[])": FunctionFragment;
    "submitDeposits(tuple,tuple)": FunctionFragment;
    "submitMassMigration(bytes32[],uint256[2][],uint256[4][],bytes32[],bytes[])": FunctionFragment;
    "submitTransfer(bytes32[],uint256[2][],uint256[],bytes[])": FunctionFragment;
    "transfer()": FunctionFragment;
    "withdrawStake(uint256)": FunctionFragment;
    "withdrawalBitmap(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ZERO_BYTES32",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "appID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "chooser", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "create2Transfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeSignatureCreate2Transfer",
    values: [
      BigNumberish,
      {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeysSender: BigNumberish[][];
        pubkeyWitnessesSender: BytesLike[][];
        pubkeysReceiver: BigNumberish[][];
        pubkeyWitnessesReceiver: BytesLike[][];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeSignatureMassMigration",
    values: [
      BigNumberish,
      {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeSignatureTransfer",
    values: [
      BigNumberish,
      {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeTransitionCreate2Transfer",
    values: [
      BigNumberish,
      {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeTransitionMassMigration",
    values: [
      BigNumberish,
      {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeTransitionTransfer",
    values: [
      BigNumberish,
      {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "invalidBatchMarker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "keepRollingBack",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "massMigration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextBatchID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paramBlocksToFinalise",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paramMaxTxsPerCommit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paramMinGasLeft",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paramStakeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitCreate2Transfer",
    values: [BytesLike[], BigNumberish[][], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "submitDeposits",
    values: [
      {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      {depth: BigNumberish; pathAtDepth: BigNumberish; witness: BytesLike[]}
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitMassMigration",
    values: [
      BytesLike[],
      BigNumberish[][],
      BigNumberish[][],
      BytesLike[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTransfer",
    values: [BytesLike[], BigNumberish[][], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "transfer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalBitmap",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ZERO_BYTES32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batches", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chooser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "create2Transfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disputeSignatureCreate2Transfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeSignatureMassMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeSignatureTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeTransitionCreate2Transfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeTransitionMassMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeTransitionTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "invalidBatchMarker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keepRollingBack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextBatchID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paramBlocksToFinalise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paramMaxTxsPerCommit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paramMinGasLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paramStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitCreate2Transfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitMassMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalBitmap",
    data: BytesLike
  ): Result;

  events: {
    "BatchRollback(uint256)": EventFragment;
    "DepositsFinalised(bytes32,uint256)": EventFragment;
    "NewBatch(address,uint256,uint8)": EventFragment;
    "RollbackFinalisation(uint256)": EventFragment;
    "StakeWithdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BatchRollback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositsFinalised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RollbackFinalisation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeWithdraw"): EventFragment;
}

export class Rollup extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RollupInterface;

  functions: {
    ZERO_BYTES32(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "ZERO_BYTES32()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    accountRegistry(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "accountRegistry()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    appID(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "appID()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    batches(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      commitmentRoot: string;
      meta: string;
      0: string;
      1: string;
    }>;

    "batches(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      commitmentRoot: string;
      meta: string;
      0: string;
      1: string;
    }>;

    chooser(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "chooser()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    create2Transfer(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "create2Transfer()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    depositManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "depositManager()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    deposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "deposits(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    disputeSignatureCreate2Transfer(
      batchID: BigNumberish,
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      signatureProof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeysSender: BigNumberish[][];
        pubkeyWitnessesSender: BytesLike[][];
        pubkeysReceiver: BigNumberish[][];
        pubkeyWitnessesReceiver: BytesLike[][];
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "disputeSignatureCreate2Transfer(uint256,tuple,tuple)"(
      batchID: BigNumberish,
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      signatureProof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeysSender: BigNumberish[][];
        pubkeyWitnessesSender: BytesLike[][];
        pubkeysReceiver: BigNumberish[][];
        pubkeyWitnessesReceiver: BytesLike[][];
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    disputeSignatureMassMigration(
      batchID: BigNumberish,
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      signatureProof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "disputeSignatureMassMigration(uint256,tuple,tuple)"(
      batchID: BigNumberish,
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      signatureProof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    disputeSignatureTransfer(
      batchID: BigNumberish,
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      signatureProof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "disputeSignatureTransfer(uint256,tuple,tuple)"(
      batchID: BigNumberish,
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      signatureProof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    disputeTransitionCreate2Transfer(
      batchID: BigNumberish,
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "disputeTransitionCreate2Transfer(uint256,tuple,tuple,tuple[])"(
      batchID: BigNumberish,
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    disputeTransitionMassMigration(
      batchID: BigNumberish,
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "disputeTransitionMassMigration(uint256,tuple,tuple,tuple[])"(
      batchID: BigNumberish,
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    disputeTransitionTransfer(
      batchID: BigNumberish,
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "disputeTransitionTransfer(uint256,tuple,tuple,tuple[])"(
      batchID: BigNumberish,
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getBatch(
      batchID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      batch: {commitmentRoot: string; meta: string; 0: string; 1: string};
      0: {commitmentRoot: string; meta: string; 0: string; 1: string};
    }>;

    "getBatch(uint256)"(
      batchID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      batch: {commitmentRoot: string; meta: string; 0: string; 1: string};
      0: {commitmentRoot: string; meta: string; 0: string; 1: string};
    }>;

    invalidBatchMarker(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "invalidBatchMarker()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    keepRollingBack(overrides?: Overrides): Promise<ContractTransaction>;

    "keepRollingBack()"(overrides?: Overrides): Promise<ContractTransaction>;

    massMigration(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "massMigration()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    nextBatchID(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "nextBatchID()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    paramBlocksToFinalise(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "paramBlocksToFinalise()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    paramMaxTxsPerCommit(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "paramMaxTxsPerCommit()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    paramMinGasLeft(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "paramMinGasLeft()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    paramStakeAmount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "paramStakeAmount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    submitCreate2Transfer(
      stateRoots: BytesLike[],
      signatures: BigNumberish[][],
      feeReceivers: BigNumberish[],
      txss: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "submitCreate2Transfer(bytes32[],uint256[2][],uint256[],bytes[])"(
      stateRoots: BytesLike[],
      signatures: BigNumberish[][],
      feeReceivers: BigNumberish[],
      txss: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    submitDeposits(
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      vacant: {
        depth: BigNumberish;
        pathAtDepth: BigNumberish;
        witness: BytesLike[];
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "submitDeposits(tuple,tuple)"(
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      vacant: {
        depth: BigNumberish;
        pathAtDepth: BigNumberish;
        witness: BytesLike[];
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    submitMassMigration(
      stateRoots: BytesLike[],
      signatures: BigNumberish[][],
      meta: BigNumberish[][],
      withdrawRoots: BytesLike[],
      txss: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "submitMassMigration(bytes32[],uint256[2][],uint256[4][],bytes32[],bytes[])"(
      stateRoots: BytesLike[],
      signatures: BigNumberish[][],
      meta: BigNumberish[][],
      withdrawRoots: BytesLike[],
      txss: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    submitTransfer(
      stateRoots: BytesLike[],
      signatures: BigNumberish[][],
      feeReceivers: BigNumberish[],
      txss: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "submitTransfer(bytes32[],uint256[2][],uint256[],bytes[])"(
      stateRoots: BytesLike[],
      signatures: BigNumberish[][],
      feeReceivers: BigNumberish[],
      txss: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    transfer(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "transfer()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    withdrawStake(
      batchID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawStake(uint256)"(
      batchID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawalBitmap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "withdrawalBitmap(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  ZERO_BYTES32(overrides?: CallOverrides): Promise<string>;

  "ZERO_BYTES32()"(overrides?: CallOverrides): Promise<string>;

  accountRegistry(overrides?: CallOverrides): Promise<string>;

  "accountRegistry()"(overrides?: CallOverrides): Promise<string>;

  appID(overrides?: CallOverrides): Promise<string>;

  "appID()"(overrides?: CallOverrides): Promise<string>;

  batches(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    commitmentRoot: string;
    meta: string;
    0: string;
    1: string;
  }>;

  "batches(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    commitmentRoot: string;
    meta: string;
    0: string;
    1: string;
  }>;

  chooser(overrides?: CallOverrides): Promise<string>;

  "chooser()"(overrides?: CallOverrides): Promise<string>;

  create2Transfer(overrides?: CallOverrides): Promise<string>;

  "create2Transfer()"(overrides?: CallOverrides): Promise<string>;

  depositManager(overrides?: CallOverrides): Promise<string>;

  "depositManager()"(overrides?: CallOverrides): Promise<string>;

  deposits(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "deposits(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  disputeSignatureCreate2Transfer(
    batchID: BigNumberish,
    target: {
      commitment: {
        stateRoot: BytesLike;
        body: {
          accountRoot: BytesLike;
          signature: BigNumberish[];
          feeReceiver: BigNumberish;
          txs: BytesLike;
        };
      };
      path: BigNumberish;
      witness: BytesLike[];
    },
    signatureProof: {
      states: {
        pubkeyID: BigNumberish;
        tokenID: BigNumberish;
        balance: BigNumberish;
        nonce: BigNumberish;
      }[];
      stateWitnesses: BytesLike[][];
      pubkeysSender: BigNumberish[][];
      pubkeyWitnessesSender: BytesLike[][];
      pubkeysReceiver: BigNumberish[][];
      pubkeyWitnessesReceiver: BytesLike[][];
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "disputeSignatureCreate2Transfer(uint256,tuple,tuple)"(
    batchID: BigNumberish,
    target: {
      commitment: {
        stateRoot: BytesLike;
        body: {
          accountRoot: BytesLike;
          signature: BigNumberish[];
          feeReceiver: BigNumberish;
          txs: BytesLike;
        };
      };
      path: BigNumberish;
      witness: BytesLike[];
    },
    signatureProof: {
      states: {
        pubkeyID: BigNumberish;
        tokenID: BigNumberish;
        balance: BigNumberish;
        nonce: BigNumberish;
      }[];
      stateWitnesses: BytesLike[][];
      pubkeysSender: BigNumberish[][];
      pubkeyWitnessesSender: BytesLike[][];
      pubkeysReceiver: BigNumberish[][];
      pubkeyWitnessesReceiver: BytesLike[][];
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  disputeSignatureMassMigration(
    batchID: BigNumberish,
    target: {
      commitment: {
        stateRoot: BytesLike;
        body: {
          accountRoot: BytesLike;
          signature: BigNumberish[];
          spokeID: BigNumberish;
          withdrawRoot: BytesLike;
          tokenID: BigNumberish;
          amount: BigNumberish;
          feeReceiver: BigNumberish;
          txs: BytesLike;
        };
      };
      path: BigNumberish;
      witness: BytesLike[];
    },
    signatureProof: {
      states: {
        pubkeyID: BigNumberish;
        tokenID: BigNumberish;
        balance: BigNumberish;
        nonce: BigNumberish;
      }[];
      stateWitnesses: BytesLike[][];
      pubkeys: BigNumberish[][];
      pubkeyWitnesses: BytesLike[][];
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "disputeSignatureMassMigration(uint256,tuple,tuple)"(
    batchID: BigNumberish,
    target: {
      commitment: {
        stateRoot: BytesLike;
        body: {
          accountRoot: BytesLike;
          signature: BigNumberish[];
          spokeID: BigNumberish;
          withdrawRoot: BytesLike;
          tokenID: BigNumberish;
          amount: BigNumberish;
          feeReceiver: BigNumberish;
          txs: BytesLike;
        };
      };
      path: BigNumberish;
      witness: BytesLike[];
    },
    signatureProof: {
      states: {
        pubkeyID: BigNumberish;
        tokenID: BigNumberish;
        balance: BigNumberish;
        nonce: BigNumberish;
      }[];
      stateWitnesses: BytesLike[][];
      pubkeys: BigNumberish[][];
      pubkeyWitnesses: BytesLike[][];
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  disputeSignatureTransfer(
    batchID: BigNumberish,
    target: {
      commitment: {
        stateRoot: BytesLike;
        body: {
          accountRoot: BytesLike;
          signature: BigNumberish[];
          feeReceiver: BigNumberish;
          txs: BytesLike;
        };
      };
      path: BigNumberish;
      witness: BytesLike[];
    },
    signatureProof: {
      states: {
        pubkeyID: BigNumberish;
        tokenID: BigNumberish;
        balance: BigNumberish;
        nonce: BigNumberish;
      }[];
      stateWitnesses: BytesLike[][];
      pubkeys: BigNumberish[][];
      pubkeyWitnesses: BytesLike[][];
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "disputeSignatureTransfer(uint256,tuple,tuple)"(
    batchID: BigNumberish,
    target: {
      commitment: {
        stateRoot: BytesLike;
        body: {
          accountRoot: BytesLike;
          signature: BigNumberish[];
          feeReceiver: BigNumberish;
          txs: BytesLike;
        };
      };
      path: BigNumberish;
      witness: BytesLike[];
    },
    signatureProof: {
      states: {
        pubkeyID: BigNumberish;
        tokenID: BigNumberish;
        balance: BigNumberish;
        nonce: BigNumberish;
      }[];
      stateWitnesses: BytesLike[][];
      pubkeys: BigNumberish[][];
      pubkeyWitnesses: BytesLike[][];
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  disputeTransitionCreate2Transfer(
    batchID: BigNumberish,
    previous: {
      commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
      path: BigNumberish;
      witness: BytesLike[];
    },
    target: {
      commitment: {
        stateRoot: BytesLike;
        body: {
          accountRoot: BytesLike;
          signature: BigNumberish[];
          feeReceiver: BigNumberish;
          txs: BytesLike;
        };
      };
      path: BigNumberish;
      witness: BytesLike[];
    },
    proofs: {
      state: {
        pubkeyID: BigNumberish;
        tokenID: BigNumberish;
        balance: BigNumberish;
        nonce: BigNumberish;
      };
      witness: BytesLike[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "disputeTransitionCreate2Transfer(uint256,tuple,tuple,tuple[])"(
    batchID: BigNumberish,
    previous: {
      commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
      path: BigNumberish;
      witness: BytesLike[];
    },
    target: {
      commitment: {
        stateRoot: BytesLike;
        body: {
          accountRoot: BytesLike;
          signature: BigNumberish[];
          feeReceiver: BigNumberish;
          txs: BytesLike;
        };
      };
      path: BigNumberish;
      witness: BytesLike[];
    },
    proofs: {
      state: {
        pubkeyID: BigNumberish;
        tokenID: BigNumberish;
        balance: BigNumberish;
        nonce: BigNumberish;
      };
      witness: BytesLike[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  disputeTransitionMassMigration(
    batchID: BigNumberish,
    previous: {
      commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
      path: BigNumberish;
      witness: BytesLike[];
    },
    target: {
      commitment: {
        stateRoot: BytesLike;
        body: {
          accountRoot: BytesLike;
          signature: BigNumberish[];
          spokeID: BigNumberish;
          withdrawRoot: BytesLike;
          tokenID: BigNumberish;
          amount: BigNumberish;
          feeReceiver: BigNumberish;
          txs: BytesLike;
        };
      };
      path: BigNumberish;
      witness: BytesLike[];
    },
    proofs: {
      state: {
        pubkeyID: BigNumberish;
        tokenID: BigNumberish;
        balance: BigNumberish;
        nonce: BigNumberish;
      };
      witness: BytesLike[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "disputeTransitionMassMigration(uint256,tuple,tuple,tuple[])"(
    batchID: BigNumberish,
    previous: {
      commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
      path: BigNumberish;
      witness: BytesLike[];
    },
    target: {
      commitment: {
        stateRoot: BytesLike;
        body: {
          accountRoot: BytesLike;
          signature: BigNumberish[];
          spokeID: BigNumberish;
          withdrawRoot: BytesLike;
          tokenID: BigNumberish;
          amount: BigNumberish;
          feeReceiver: BigNumberish;
          txs: BytesLike;
        };
      };
      path: BigNumberish;
      witness: BytesLike[];
    },
    proofs: {
      state: {
        pubkeyID: BigNumberish;
        tokenID: BigNumberish;
        balance: BigNumberish;
        nonce: BigNumberish;
      };
      witness: BytesLike[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  disputeTransitionTransfer(
    batchID: BigNumberish,
    previous: {
      commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
      path: BigNumberish;
      witness: BytesLike[];
    },
    target: {
      commitment: {
        stateRoot: BytesLike;
        body: {
          accountRoot: BytesLike;
          signature: BigNumberish[];
          feeReceiver: BigNumberish;
          txs: BytesLike;
        };
      };
      path: BigNumberish;
      witness: BytesLike[];
    },
    proofs: {
      state: {
        pubkeyID: BigNumberish;
        tokenID: BigNumberish;
        balance: BigNumberish;
        nonce: BigNumberish;
      };
      witness: BytesLike[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "disputeTransitionTransfer(uint256,tuple,tuple,tuple[])"(
    batchID: BigNumberish,
    previous: {
      commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
      path: BigNumberish;
      witness: BytesLike[];
    },
    target: {
      commitment: {
        stateRoot: BytesLike;
        body: {
          accountRoot: BytesLike;
          signature: BigNumberish[];
          feeReceiver: BigNumberish;
          txs: BytesLike;
        };
      };
      path: BigNumberish;
      witness: BytesLike[];
    },
    proofs: {
      state: {
        pubkeyID: BigNumberish;
        tokenID: BigNumberish;
        balance: BigNumberish;
        nonce: BigNumberish;
      };
      witness: BytesLike[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getBatch(
    batchID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{commitmentRoot: string; meta: string; 0: string; 1: string}>;

  "getBatch(uint256)"(
    batchID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{commitmentRoot: string; meta: string; 0: string; 1: string}>;

  invalidBatchMarker(overrides?: CallOverrides): Promise<BigNumber>;

  "invalidBatchMarker()"(overrides?: CallOverrides): Promise<BigNumber>;

  keepRollingBack(overrides?: Overrides): Promise<ContractTransaction>;

  "keepRollingBack()"(overrides?: Overrides): Promise<ContractTransaction>;

  massMigration(overrides?: CallOverrides): Promise<string>;

  "massMigration()"(overrides?: CallOverrides): Promise<string>;

  nextBatchID(overrides?: CallOverrides): Promise<BigNumber>;

  "nextBatchID()"(overrides?: CallOverrides): Promise<BigNumber>;

  paramBlocksToFinalise(overrides?: CallOverrides): Promise<BigNumber>;

  "paramBlocksToFinalise()"(overrides?: CallOverrides): Promise<BigNumber>;

  paramMaxTxsPerCommit(overrides?: CallOverrides): Promise<BigNumber>;

  "paramMaxTxsPerCommit()"(overrides?: CallOverrides): Promise<BigNumber>;

  paramMinGasLeft(overrides?: CallOverrides): Promise<BigNumber>;

  "paramMinGasLeft()"(overrides?: CallOverrides): Promise<BigNumber>;

  paramStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "paramStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  submitCreate2Transfer(
    stateRoots: BytesLike[],
    signatures: BigNumberish[][],
    feeReceivers: BigNumberish[],
    txss: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "submitCreate2Transfer(bytes32[],uint256[2][],uint256[],bytes[])"(
    stateRoots: BytesLike[],
    signatures: BigNumberish[][],
    feeReceivers: BigNumberish[],
    txss: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  submitDeposits(
    previous: {
      commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
      path: BigNumberish;
      witness: BytesLike[];
    },
    vacant: {
      depth: BigNumberish;
      pathAtDepth: BigNumberish;
      witness: BytesLike[];
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "submitDeposits(tuple,tuple)"(
    previous: {
      commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
      path: BigNumberish;
      witness: BytesLike[];
    },
    vacant: {
      depth: BigNumberish;
      pathAtDepth: BigNumberish;
      witness: BytesLike[];
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  submitMassMigration(
    stateRoots: BytesLike[],
    signatures: BigNumberish[][],
    meta: BigNumberish[][],
    withdrawRoots: BytesLike[],
    txss: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "submitMassMigration(bytes32[],uint256[2][],uint256[4][],bytes32[],bytes[])"(
    stateRoots: BytesLike[],
    signatures: BigNumberish[][],
    meta: BigNumberish[][],
    withdrawRoots: BytesLike[],
    txss: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  submitTransfer(
    stateRoots: BytesLike[],
    signatures: BigNumberish[][],
    feeReceivers: BigNumberish[],
    txss: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "submitTransfer(bytes32[],uint256[2][],uint256[],bytes[])"(
    stateRoots: BytesLike[],
    signatures: BigNumberish[][],
    feeReceivers: BigNumberish[],
    txss: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  transfer(overrides?: CallOverrides): Promise<string>;

  "transfer()"(overrides?: CallOverrides): Promise<string>;

  withdrawStake(
    batchID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawStake(uint256)"(
    batchID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawalBitmap(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "withdrawalBitmap(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    ZERO_BYTES32(overrides?: CallOverrides): Promise<string>;

    "ZERO_BYTES32()"(overrides?: CallOverrides): Promise<string>;

    accountRegistry(overrides?: CallOverrides): Promise<string>;

    "accountRegistry()"(overrides?: CallOverrides): Promise<string>;

    appID(overrides?: CallOverrides): Promise<string>;

    "appID()"(overrides?: CallOverrides): Promise<string>;

    batches(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      commitmentRoot: string;
      meta: string;
      0: string;
      1: string;
    }>;

    "batches(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      commitmentRoot: string;
      meta: string;
      0: string;
      1: string;
    }>;

    chooser(overrides?: CallOverrides): Promise<string>;

    "chooser()"(overrides?: CallOverrides): Promise<string>;

    create2Transfer(overrides?: CallOverrides): Promise<string>;

    "create2Transfer()"(overrides?: CallOverrides): Promise<string>;

    depositManager(overrides?: CallOverrides): Promise<string>;

    "depositManager()"(overrides?: CallOverrides): Promise<string>;

    deposits(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "deposits(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    disputeSignatureCreate2Transfer(
      batchID: BigNumberish,
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      signatureProof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeysSender: BigNumberish[][];
        pubkeyWitnessesSender: BytesLike[][];
        pubkeysReceiver: BigNumberish[][];
        pubkeyWitnessesReceiver: BytesLike[][];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "disputeSignatureCreate2Transfer(uint256,tuple,tuple)"(
      batchID: BigNumberish,
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      signatureProof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeysSender: BigNumberish[][];
        pubkeyWitnessesSender: BytesLike[][];
        pubkeysReceiver: BigNumberish[][];
        pubkeyWitnessesReceiver: BytesLike[][];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    disputeSignatureMassMigration(
      batchID: BigNumberish,
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      signatureProof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "disputeSignatureMassMigration(uint256,tuple,tuple)"(
      batchID: BigNumberish,
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      signatureProof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    disputeSignatureTransfer(
      batchID: BigNumberish,
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      signatureProof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "disputeSignatureTransfer(uint256,tuple,tuple)"(
      batchID: BigNumberish,
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      signatureProof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    disputeTransitionCreate2Transfer(
      batchID: BigNumberish,
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "disputeTransitionCreate2Transfer(uint256,tuple,tuple,tuple[])"(
      batchID: BigNumberish,
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    disputeTransitionMassMigration(
      batchID: BigNumberish,
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "disputeTransitionMassMigration(uint256,tuple,tuple,tuple[])"(
      batchID: BigNumberish,
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    disputeTransitionTransfer(
      batchID: BigNumberish,
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "disputeTransitionTransfer(uint256,tuple,tuple,tuple[])"(
      batchID: BigNumberish,
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    getBatch(
      batchID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{commitmentRoot: string; meta: string; 0: string; 1: string}>;

    "getBatch(uint256)"(
      batchID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{commitmentRoot: string; meta: string; 0: string; 1: string}>;

    invalidBatchMarker(overrides?: CallOverrides): Promise<BigNumber>;

    "invalidBatchMarker()"(overrides?: CallOverrides): Promise<BigNumber>;

    keepRollingBack(overrides?: CallOverrides): Promise<void>;

    "keepRollingBack()"(overrides?: CallOverrides): Promise<void>;

    massMigration(overrides?: CallOverrides): Promise<string>;

    "massMigration()"(overrides?: CallOverrides): Promise<string>;

    nextBatchID(overrides?: CallOverrides): Promise<BigNumber>;

    "nextBatchID()"(overrides?: CallOverrides): Promise<BigNumber>;

    paramBlocksToFinalise(overrides?: CallOverrides): Promise<BigNumber>;

    "paramBlocksToFinalise()"(overrides?: CallOverrides): Promise<BigNumber>;

    paramMaxTxsPerCommit(overrides?: CallOverrides): Promise<BigNumber>;

    "paramMaxTxsPerCommit()"(overrides?: CallOverrides): Promise<BigNumber>;

    paramMinGasLeft(overrides?: CallOverrides): Promise<BigNumber>;

    "paramMinGasLeft()"(overrides?: CallOverrides): Promise<BigNumber>;

    paramStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "paramStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    submitCreate2Transfer(
      stateRoots: BytesLike[],
      signatures: BigNumberish[][],
      feeReceivers: BigNumberish[],
      txss: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "submitCreate2Transfer(bytes32[],uint256[2][],uint256[],bytes[])"(
      stateRoots: BytesLike[],
      signatures: BigNumberish[][],
      feeReceivers: BigNumberish[],
      txss: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    submitDeposits(
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      vacant: {
        depth: BigNumberish;
        pathAtDepth: BigNumberish;
        witness: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "submitDeposits(tuple,tuple)"(
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      vacant: {
        depth: BigNumberish;
        pathAtDepth: BigNumberish;
        witness: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    submitMassMigration(
      stateRoots: BytesLike[],
      signatures: BigNumberish[][],
      meta: BigNumberish[][],
      withdrawRoots: BytesLike[],
      txss: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "submitMassMigration(bytes32[],uint256[2][],uint256[4][],bytes32[],bytes[])"(
      stateRoots: BytesLike[],
      signatures: BigNumberish[][],
      meta: BigNumberish[][],
      withdrawRoots: BytesLike[],
      txss: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    submitTransfer(
      stateRoots: BytesLike[],
      signatures: BigNumberish[][],
      feeReceivers: BigNumberish[],
      txss: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "submitTransfer(bytes32[],uint256[2][],uint256[],bytes[])"(
      stateRoots: BytesLike[],
      signatures: BigNumberish[][],
      feeReceivers: BigNumberish[],
      txss: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    transfer(overrides?: CallOverrides): Promise<string>;

    "transfer()"(overrides?: CallOverrides): Promise<string>;

    withdrawStake(
      batchID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawStake(uint256)"(
      batchID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawalBitmap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawalBitmap(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    BatchRollback(batchID: null): EventFilter;

    DepositsFinalised(
      depositSubTreeRoot: null,
      pathToSubTree: null
    ): EventFilter;

    NewBatch(committer: null, index: null, batchType: null): EventFilter;

    RollbackFinalisation(totalBatchesSlashed: null): EventFilter;

    StakeWithdraw(committed: null, batchID: null): EventFilter;
  };

  estimateGas: {
    ZERO_BYTES32(overrides?: CallOverrides): Promise<BigNumber>;

    "ZERO_BYTES32()"(overrides?: CallOverrides): Promise<BigNumber>;

    accountRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "accountRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    appID(overrides?: CallOverrides): Promise<BigNumber>;

    "appID()"(overrides?: CallOverrides): Promise<BigNumber>;

    batches(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "batches(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chooser(overrides?: CallOverrides): Promise<BigNumber>;

    "chooser()"(overrides?: CallOverrides): Promise<BigNumber>;

    create2Transfer(overrides?: CallOverrides): Promise<BigNumber>;

    "create2Transfer()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositManager(overrides?: CallOverrides): Promise<BigNumber>;

    "depositManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposits(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "deposits(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disputeSignatureCreate2Transfer(
      batchID: BigNumberish,
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      signatureProof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeysSender: BigNumberish[][];
        pubkeyWitnessesSender: BytesLike[][];
        pubkeysReceiver: BigNumberish[][];
        pubkeyWitnessesReceiver: BytesLike[][];
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "disputeSignatureCreate2Transfer(uint256,tuple,tuple)"(
      batchID: BigNumberish,
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      signatureProof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeysSender: BigNumberish[][];
        pubkeyWitnessesSender: BytesLike[][];
        pubkeysReceiver: BigNumberish[][];
        pubkeyWitnessesReceiver: BytesLike[][];
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    disputeSignatureMassMigration(
      batchID: BigNumberish,
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      signatureProof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "disputeSignatureMassMigration(uint256,tuple,tuple)"(
      batchID: BigNumberish,
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      signatureProof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    disputeSignatureTransfer(
      batchID: BigNumberish,
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      signatureProof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "disputeSignatureTransfer(uint256,tuple,tuple)"(
      batchID: BigNumberish,
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      signatureProof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    disputeTransitionCreate2Transfer(
      batchID: BigNumberish,
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "disputeTransitionCreate2Transfer(uint256,tuple,tuple,tuple[])"(
      batchID: BigNumberish,
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    disputeTransitionMassMigration(
      batchID: BigNumberish,
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "disputeTransitionMassMigration(uint256,tuple,tuple,tuple[])"(
      batchID: BigNumberish,
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    disputeTransitionTransfer(
      batchID: BigNumberish,
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "disputeTransitionTransfer(uint256,tuple,tuple,tuple[])"(
      batchID: BigNumberish,
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    getBatch(
      batchID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBatch(uint256)"(
      batchID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invalidBatchMarker(overrides?: CallOverrides): Promise<BigNumber>;

    "invalidBatchMarker()"(overrides?: CallOverrides): Promise<BigNumber>;

    keepRollingBack(overrides?: Overrides): Promise<BigNumber>;

    "keepRollingBack()"(overrides?: Overrides): Promise<BigNumber>;

    massMigration(overrides?: CallOverrides): Promise<BigNumber>;

    "massMigration()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextBatchID(overrides?: CallOverrides): Promise<BigNumber>;

    "nextBatchID()"(overrides?: CallOverrides): Promise<BigNumber>;

    paramBlocksToFinalise(overrides?: CallOverrides): Promise<BigNumber>;

    "paramBlocksToFinalise()"(overrides?: CallOverrides): Promise<BigNumber>;

    paramMaxTxsPerCommit(overrides?: CallOverrides): Promise<BigNumber>;

    "paramMaxTxsPerCommit()"(overrides?: CallOverrides): Promise<BigNumber>;

    paramMinGasLeft(overrides?: CallOverrides): Promise<BigNumber>;

    "paramMinGasLeft()"(overrides?: CallOverrides): Promise<BigNumber>;

    paramStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "paramStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    submitCreate2Transfer(
      stateRoots: BytesLike[],
      signatures: BigNumberish[][],
      feeReceivers: BigNumberish[],
      txss: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "submitCreate2Transfer(bytes32[],uint256[2][],uint256[],bytes[])"(
      stateRoots: BytesLike[],
      signatures: BigNumberish[][],
      feeReceivers: BigNumberish[],
      txss: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    submitDeposits(
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      vacant: {
        depth: BigNumberish;
        pathAtDepth: BigNumberish;
        witness: BytesLike[];
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "submitDeposits(tuple,tuple)"(
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      vacant: {
        depth: BigNumberish;
        pathAtDepth: BigNumberish;
        witness: BytesLike[];
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    submitMassMigration(
      stateRoots: BytesLike[],
      signatures: BigNumberish[][],
      meta: BigNumberish[][],
      withdrawRoots: BytesLike[],
      txss: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "submitMassMigration(bytes32[],uint256[2][],uint256[4][],bytes32[],bytes[])"(
      stateRoots: BytesLike[],
      signatures: BigNumberish[][],
      meta: BigNumberish[][],
      withdrawRoots: BytesLike[],
      txss: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    submitTransfer(
      stateRoots: BytesLike[],
      signatures: BigNumberish[][],
      feeReceivers: BigNumberish[],
      txss: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "submitTransfer(bytes32[],uint256[2][],uint256[],bytes[])"(
      stateRoots: BytesLike[],
      signatures: BigNumberish[][],
      feeReceivers: BigNumberish[],
      txss: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    transfer(overrides?: CallOverrides): Promise<BigNumber>;

    "transfer()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawStake(
      batchID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawStake(uint256)"(
      batchID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawalBitmap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawalBitmap(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ZERO_BYTES32(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ZERO_BYTES32()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "accountRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "appID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batches(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "batches(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chooser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "chooser()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    create2Transfer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "create2Transfer()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "depositManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deposits(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disputeSignatureCreate2Transfer(
      batchID: BigNumberish,
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      signatureProof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeysSender: BigNumberish[][];
        pubkeyWitnessesSender: BytesLike[][];
        pubkeysReceiver: BigNumberish[][];
        pubkeyWitnessesReceiver: BytesLike[][];
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "disputeSignatureCreate2Transfer(uint256,tuple,tuple)"(
      batchID: BigNumberish,
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      signatureProof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeysSender: BigNumberish[][];
        pubkeyWitnessesSender: BytesLike[][];
        pubkeysReceiver: BigNumberish[][];
        pubkeyWitnessesReceiver: BytesLike[][];
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    disputeSignatureMassMigration(
      batchID: BigNumberish,
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      signatureProof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "disputeSignatureMassMigration(uint256,tuple,tuple)"(
      batchID: BigNumberish,
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      signatureProof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    disputeSignatureTransfer(
      batchID: BigNumberish,
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      signatureProof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "disputeSignatureTransfer(uint256,tuple,tuple)"(
      batchID: BigNumberish,
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      signatureProof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    disputeTransitionCreate2Transfer(
      batchID: BigNumberish,
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "disputeTransitionCreate2Transfer(uint256,tuple,tuple,tuple[])"(
      batchID: BigNumberish,
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    disputeTransitionMassMigration(
      batchID: BigNumberish,
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "disputeTransitionMassMigration(uint256,tuple,tuple,tuple[])"(
      batchID: BigNumberish,
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    disputeTransitionTransfer(
      batchID: BigNumberish,
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "disputeTransitionTransfer(uint256,tuple,tuple,tuple[])"(
      batchID: BigNumberish,
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      target: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getBatch(
      batchID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBatch(uint256)"(
      batchID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invalidBatchMarker(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "invalidBatchMarker()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keepRollingBack(overrides?: Overrides): Promise<PopulatedTransaction>;

    "keepRollingBack()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    massMigration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "massMigration()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextBatchID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nextBatchID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paramBlocksToFinalise(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "paramBlocksToFinalise()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paramMaxTxsPerCommit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "paramMaxTxsPerCommit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paramMinGasLeft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paramMinGasLeft()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paramStakeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paramStakeAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitCreate2Transfer(
      stateRoots: BytesLike[],
      signatures: BigNumberish[][],
      feeReceivers: BigNumberish[],
      txss: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "submitCreate2Transfer(bytes32[],uint256[2][],uint256[],bytes[])"(
      stateRoots: BytesLike[],
      signatures: BigNumberish[][],
      feeReceivers: BigNumberish[],
      txss: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    submitDeposits(
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      vacant: {
        depth: BigNumberish;
        pathAtDepth: BigNumberish;
        witness: BytesLike[];
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "submitDeposits(tuple,tuple)"(
      previous: {
        commitment: {stateRoot: BytesLike; bodyRoot: BytesLike};
        path: BigNumberish;
        witness: BytesLike[];
      },
      vacant: {
        depth: BigNumberish;
        pathAtDepth: BigNumberish;
        witness: BytesLike[];
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    submitMassMigration(
      stateRoots: BytesLike[],
      signatures: BigNumberish[][],
      meta: BigNumberish[][],
      withdrawRoots: BytesLike[],
      txss: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "submitMassMigration(bytes32[],uint256[2][],uint256[4][],bytes32[],bytes[])"(
      stateRoots: BytesLike[],
      signatures: BigNumberish[][],
      meta: BigNumberish[][],
      withdrawRoots: BytesLike[],
      txss: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    submitTransfer(
      stateRoots: BytesLike[],
      signatures: BigNumberish[][],
      feeReceivers: BigNumberish[],
      txss: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "submitTransfer(bytes32[],uint256[2][],uint256[],bytes[])"(
      stateRoots: BytesLike[],
      signatures: BigNumberish[][],
      feeReceivers: BigNumberish[],
      txss: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    transfer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "transfer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawStake(
      batchID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawStake(uint256)"(
      batchID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawalBitmap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "withdrawalBitmap(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
