/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Signer} from "ethers";
import {Provider, TransactionRequest} from "@ethersproject/providers";
import {Contract, ContractFactory, Overrides} from "@ethersproject/contracts";

import {NameRegistry} from "./NameRegistry";

export class NameRegistryFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<NameRegistry> {
    return super.deploy(overrides || {}) as Promise<NameRegistry>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): NameRegistry {
    return super.attach(address) as NameRegistry;
  }
  connect(signer: Signer): NameRegistryFactory {
    return super.connect(signer) as NameRegistryFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NameRegistry {
    return new Contract(address, _abi, signerOrProvider) as NameRegistry;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "name",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "address",
        name: "contractAddr",
        type: "address"
      }
    ],
    name: "RegisteredNewContract",
    type: "event"
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "bytes32",
        name: "name",
        type: "bytes32"
      }
    ],
    name: "getContractDetails",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "bytes32",
        name: "name",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "addr",
        type: "address"
      }
    ],
    name: "registerName",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    name: "registry",
    outputs: [
      {
        internalType: "address",
        name: "contractAddress",
        type: "address"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101d0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063185e9969146100465780637ef502981461007f578063c8b41b831461009c575b600080fd5b6100636004803603602081101561005c57600080fd5b50356100dc565b604080516001600160a01b039092168252519081900360200190f35b6100636004803603602081101561009557600080fd5b50356100f7565b6100c8600480360360408110156100b257600080fd5b50803590602001356001600160a01b0316610112565b604080519115158252519081900360200190f35b6000908152602081905260409020546001600160a01b031690565b6000602081905290815260409020546001600160a01b031681565b600061011c610189565b5060008381526020818152604091829020825191820190925290546001600160a01b031680825261017d576001600160a01b0383811682526000858152602081905260409020915182546001600160a01b0319169116179055506001610183565b60009150505b92915050565b6040805160208101909152600081529056fea265627a7a72315820994360331d21961f4fbf82215cc6d256e31d733b69340172cb30a82b827f2fd164736f6c634300050f0032";
