/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Signer} from "ethers";
import {Provider, TransactionRequest} from "@ethersproject/providers";
import {Contract, ContractFactory, Overrides} from "@ethersproject/contracts";

import {MockRollup} from "./MockRollup";

export class MockRollupFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(_chooser: string, overrides?: Overrides): Promise<MockRollup> {
    return super.deploy(_chooser, overrides || {}) as Promise<MockRollup>;
  }
  getDeployTransaction(
    _chooser: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(_chooser, overrides || {});
  }
  attach(address: string): MockRollup {
    return super.attach(address) as MockRollup;
  }
  connect(signer: Signer): MockRollupFactory {
    return super.connect(signer) as MockRollupFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockRollup {
    return new Contract(address, _abi, signerOrProvider) as MockRollup;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract Chooser",
        name: "_chooser",
        type: "address"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    constant: true,
    inputs: [],
    name: "chooser",
    outputs: [
      {
        internalType: "contract Chooser",
        name: "",
        type: "address"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [],
    name: "submitBatch",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516101d23803806101d28339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b031990921691909117905561016d806100656000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063461153831461003b57806398d1762114610045575b600080fd5b610043610069565b005b61004d610129565b604080516001600160a01b039092168252519081900360200190f35b600054604080516374bc868160e11b8152905133926001600160a01b03169163e9790d02916004808301926020929190829003018186803b1580156100ad57600080fd5b505afa1580156100c1573d6000803e3d6000fd5b505050506040513d60208110156100d757600080fd5b50516001600160a01b031614610127576040805162461bcd60e51b815260206004820152601060248201526f24b73b30b634b210383937b837b9b2b960811b604482015290519081900360640190fd5b565b6000546001600160a01b03168156fea265627a7a72315820d87e4f5214f47a174667e454823e486f423e3ab2c4da42c79a53dff8d03b05f564736f6c634300050f0032";
