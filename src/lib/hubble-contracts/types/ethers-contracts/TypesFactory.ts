/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Signer} from "ethers";
import {Provider, TransactionRequest} from "@ethersproject/providers";
import {Contract, ContractFactory, Overrides} from "@ethersproject/contracts";

import {Types} from "./Types";

export class TypesFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<Types> {
    return super.deploy(overrides || {}) as Promise<Types>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Types {
    return super.attach(address) as Types;
  }
  connect(signer: Signer): TypesFactory {
    return super.connect(signer) as TypesFactory;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Types {
    return new Contract(address, _abi, signerOrProvider) as Types;
  }
}

const _abi = [
  {
    constant: true,
    inputs: [],
    name: "ADDRESS_MASK",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  }
];

const _bytecode =
  "0x6090610024600b82828239805160001a607314601757fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c806376379f6f146038575b600080fd5b603e6050565b60408051918252519081900360200190f35b6001600160a01b038156fea265627a7a72315820135d71d872d1a8266080e4f832df40497803b08ba736703920c5a13218b3076f64736f6c634300050f0032";
