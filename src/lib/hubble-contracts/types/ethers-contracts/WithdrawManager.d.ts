/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";

interface WithdrawManagerInterface extends ethers.utils.Interface {
  functions: {
    "appID()": FunctionFragment;
    "claimTokens(bytes32,tuple,uint256[4],uint256[2],bytes32[])": FunctionFragment;
    "processWithdrawCommitment(uint256,tuple)": FunctionFragment;
    "tokenRegistry()": FunctionFragment;
    "vault()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "appID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values: [
      BytesLike,
      {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      BigNumberish[],
      BigNumberish[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "processWithdrawCommitment",
    values: [
      BigNumberish,
      {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(functionFragment: "appID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processWithdrawCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {};
}

export class WithdrawManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: WithdrawManagerInterface;

  functions: {
    appID(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "appID()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    claimTokens(
      withdrawRoot: BytesLike,
      withdrawal: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      pubkey: BigNumberish[],
      signature: BigNumberish[],
      pubkeyWitness: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimTokens(bytes32,tuple,uint256[4],uint256[2],bytes32[])"(
      withdrawRoot: BytesLike,
      withdrawal: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      pubkey: BigNumberish[],
      signature: BigNumberish[],
      pubkeyWitness: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    processWithdrawCommitment(
      batchID: BigNumberish,
      commitmentMP: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "processWithdrawCommitment(uint256,tuple)"(
      batchID: BigNumberish,
      commitmentMP: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenRegistry(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenRegistry()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    vault(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "vault()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  appID(overrides?: CallOverrides): Promise<string>;

  "appID()"(overrides?: CallOverrides): Promise<string>;

  claimTokens(
    withdrawRoot: BytesLike,
    withdrawal: {
      state: {
        pubkeyID: BigNumberish;
        tokenID: BigNumberish;
        balance: BigNumberish;
        nonce: BigNumberish;
      };
      path: BigNumberish;
      witness: BytesLike[];
    },
    pubkey: BigNumberish[],
    signature: BigNumberish[],
    pubkeyWitness: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimTokens(bytes32,tuple,uint256[4],uint256[2],bytes32[])"(
    withdrawRoot: BytesLike,
    withdrawal: {
      state: {
        pubkeyID: BigNumberish;
        tokenID: BigNumberish;
        balance: BigNumberish;
        nonce: BigNumberish;
      };
      path: BigNumberish;
      witness: BytesLike[];
    },
    pubkey: BigNumberish[],
    signature: BigNumberish[],
    pubkeyWitness: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  processWithdrawCommitment(
    batchID: BigNumberish,
    commitmentMP: {
      commitment: {
        stateRoot: BytesLike;
        body: {
          accountRoot: BytesLike;
          signature: BigNumberish[];
          spokeID: BigNumberish;
          withdrawRoot: BytesLike;
          tokenID: BigNumberish;
          amount: BigNumberish;
          feeReceiver: BigNumberish;
          txs: BytesLike;
        };
      };
      path: BigNumberish;
      witness: BytesLike[];
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "processWithdrawCommitment(uint256,tuple)"(
    batchID: BigNumberish,
    commitmentMP: {
      commitment: {
        stateRoot: BytesLike;
        body: {
          accountRoot: BytesLike;
          signature: BigNumberish[];
          spokeID: BigNumberish;
          withdrawRoot: BytesLike;
          tokenID: BigNumberish;
          amount: BigNumberish;
          feeReceiver: BigNumberish;
          txs: BytesLike;
        };
      };
      path: BigNumberish;
      witness: BytesLike[];
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenRegistry(overrides?: CallOverrides): Promise<string>;

  "tokenRegistry()"(overrides?: CallOverrides): Promise<string>;

  vault(overrides?: CallOverrides): Promise<string>;

  "vault()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    appID(overrides?: CallOverrides): Promise<string>;

    "appID()"(overrides?: CallOverrides): Promise<string>;

    claimTokens(
      withdrawRoot: BytesLike,
      withdrawal: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      pubkey: BigNumberish[],
      signature: BigNumberish[],
      pubkeyWitness: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claimTokens(bytes32,tuple,uint256[4],uint256[2],bytes32[])"(
      withdrawRoot: BytesLike,
      withdrawal: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      pubkey: BigNumberish[],
      signature: BigNumberish[],
      pubkeyWitness: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    processWithdrawCommitment(
      batchID: BigNumberish,
      commitmentMP: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "processWithdrawCommitment(uint256,tuple)"(
      batchID: BigNumberish,
      commitmentMP: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    tokenRegistry(overrides?: CallOverrides): Promise<string>;

    "tokenRegistry()"(overrides?: CallOverrides): Promise<string>;

    vault(overrides?: CallOverrides): Promise<string>;

    "vault()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    appID(overrides?: CallOverrides): Promise<BigNumber>;

    "appID()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimTokens(
      withdrawRoot: BytesLike,
      withdrawal: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      pubkey: BigNumberish[],
      signature: BigNumberish[],
      pubkeyWitness: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimTokens(bytes32,tuple,uint256[4],uint256[2],bytes32[])"(
      withdrawRoot: BytesLike,
      withdrawal: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      pubkey: BigNumberish[],
      signature: BigNumberish[],
      pubkeyWitness: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    processWithdrawCommitment(
      batchID: BigNumberish,
      commitmentMP: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "processWithdrawCommitment(uint256,tuple)"(
      batchID: BigNumberish,
      commitmentMP: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    "vault()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    appID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "appID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimTokens(
      withdrawRoot: BytesLike,
      withdrawal: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      pubkey: BigNumberish[],
      signature: BigNumberish[],
      pubkeyWitness: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimTokens(bytes32,tuple,uint256[4],uint256[2],bytes32[])"(
      withdrawRoot: BytesLike,
      withdrawal: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      pubkey: BigNumberish[],
      signature: BigNumberish[],
      pubkeyWitness: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    processWithdrawCommitment(
      batchID: BigNumberish,
      commitmentMP: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "processWithdrawCommitment(uint256,tuple)"(
      batchID: BigNumberish,
      commitmentMP: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenRegistry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
