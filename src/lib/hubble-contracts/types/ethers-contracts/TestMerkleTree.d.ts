/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";

interface TestMerkleTreeInterface extends ethers.utils.Interface {
  functions: {
    "testGetRoot(uint256)": FunctionFragment;
    "testMerklise(bytes32[])": FunctionFragment;
    "testVerify(bytes32,bytes32,uint256,bytes32[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "testGetRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testMerklise",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "testVerify",
    values: [BytesLike, BytesLike, BigNumberish, BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "testGetRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testMerklise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testVerify", data: BytesLike): Result;

  events: {};
}

export class TestMerkleTree extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TestMerkleTreeInterface;

  functions: {
    testGetRoot(
      level: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "testGetRoot(uint256)"(
      level: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    testMerklise(
      nodes: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "testMerklise(bytes32[])"(
      nodes: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    testVerify(
      root: BytesLike,
      leaf: BytesLike,
      path: BigNumberish,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "testVerify(bytes32,bytes32,uint256,bytes32[])"(
      root: BytesLike,
      leaf: BytesLike,
      path: BigNumberish,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  testGetRoot(
    level: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "testGetRoot(uint256)"(
    level: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  testMerklise(
    nodes: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "testMerklise(bytes32[])"(
    nodes: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  testVerify(
    root: BytesLike,
    leaf: BytesLike,
    path: BigNumberish,
    witness: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "testVerify(bytes32,bytes32,uint256,bytes32[])"(
    root: BytesLike,
    leaf: BytesLike,
    path: BigNumberish,
    witness: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    testGetRoot(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
    }>;

    "testGetRoot(uint256)"(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
    }>;

    testMerklise(
      nodes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
    }>;

    "testMerklise(bytes32[])"(
      nodes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
    }>;

    testVerify(
      root: BytesLike,
      leaf: BytesLike,
      path: BigNumberish,
      witness: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
      1: BigNumber;
    }>;

    "testVerify(bytes32,bytes32,uint256,bytes32[])"(
      root: BytesLike,
      leaf: BytesLike,
      path: BigNumberish,
      witness: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
      1: BigNumber;
    }>;
  };

  filters: {};

  estimateGas: {
    testGetRoot(level: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "testGetRoot(uint256)"(
      level: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    testMerklise(nodes: BytesLike[], overrides?: Overrides): Promise<BigNumber>;

    "testMerklise(bytes32[])"(
      nodes: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    testVerify(
      root: BytesLike,
      leaf: BytesLike,
      path: BigNumberish,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "testVerify(bytes32,bytes32,uint256,bytes32[])"(
      root: BytesLike,
      leaf: BytesLike,
      path: BigNumberish,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    testGetRoot(
      level: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "testGetRoot(uint256)"(
      level: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    testMerklise(
      nodes: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "testMerklise(bytes32[])"(
      nodes: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    testVerify(
      root: BytesLike,
      leaf: BytesLike,
      path: BigNumberish,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "testVerify(bytes32,bytes32,uint256,bytes32[])"(
      root: BytesLike,
      leaf: BytesLike,
      path: BigNumberish,
      witness: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
