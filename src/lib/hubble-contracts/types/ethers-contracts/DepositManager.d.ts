/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";

interface DepositManagerInterface extends ethers.utils.Interface {
  functions: {
    "babyTrees(uint256)": FunctionFragment;
    "babyTreesLength()": FunctionFragment;
    "back()": FunctionFragment;
    "depositCount()": FunctionFragment;
    "depositFor(uint256,uint256,uint256)": FunctionFragment;
    "dequeueToSubmit()": FunctionFragment;
    "front()": FunctionFragment;
    "paramMaxSubtreeSize()": FunctionFragment;
    "queue(uint256)": FunctionFragment;
    "reenqueue(bytes32)": FunctionFragment;
    "rollup()": FunctionFragment;
    "setRollupAddress(address)": FunctionFragment;
    "tokenRegistry()": FunctionFragment;
    "vault()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "babyTrees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "babyTreesLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "back", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dequeueToSubmit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "front", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paramMaxSubtreeSize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "queue", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "reenqueue",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "rollup", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setRollupAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(functionFragment: "babyTrees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "babyTreesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "back", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dequeueToSubmit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "front", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paramMaxSubtreeSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reenqueue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rollup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRollupAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "DepositQueued(uint256,bytes)": EventFragment;
    "DepositSubTreeReady(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositQueued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositSubTreeReady"): EventFragment;
}

export class DepositManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DepositManagerInterface;

  functions: {
    babyTrees(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "babyTrees(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    babyTreesLength(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "babyTreesLength()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    back(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "back()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    depositCount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "depositCount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    depositFor(
      pubkeyID: BigNumberish,
      amount: BigNumberish,
      tokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositFor(uint256,uint256,uint256)"(
      pubkeyID: BigNumberish,
      amount: BigNumberish,
      tokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    dequeueToSubmit(overrides?: Overrides): Promise<ContractTransaction>;

    "dequeueToSubmit()"(overrides?: Overrides): Promise<ContractTransaction>;

    front(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "front()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    paramMaxSubtreeSize(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "paramMaxSubtreeSize()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    queue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "queue(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    reenqueue(
      subtreeRoot: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "reenqueue(bytes32)"(
      subtreeRoot: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rollup(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "rollup()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setRollupAddress(
      _rollup: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRollupAddress(address)"(
      _rollup: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenRegistry(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenRegistry()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    vault(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "vault()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  babyTrees(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "babyTrees(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  babyTreesLength(overrides?: CallOverrides): Promise<BigNumber>;

  "babyTreesLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  back(overrides?: CallOverrides): Promise<BigNumber>;

  "back()"(overrides?: CallOverrides): Promise<BigNumber>;

  depositCount(overrides?: CallOverrides): Promise<BigNumber>;

  "depositCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  depositFor(
    pubkeyID: BigNumberish,
    amount: BigNumberish,
    tokenID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositFor(uint256,uint256,uint256)"(
    pubkeyID: BigNumberish,
    amount: BigNumberish,
    tokenID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  dequeueToSubmit(overrides?: Overrides): Promise<ContractTransaction>;

  "dequeueToSubmit()"(overrides?: Overrides): Promise<ContractTransaction>;

  front(overrides?: CallOverrides): Promise<BigNumber>;

  "front()"(overrides?: CallOverrides): Promise<BigNumber>;

  paramMaxSubtreeSize(overrides?: CallOverrides): Promise<BigNumber>;

  "paramMaxSubtreeSize()"(overrides?: CallOverrides): Promise<BigNumber>;

  queue(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "queue(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  reenqueue(
    subtreeRoot: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "reenqueue(bytes32)"(
    subtreeRoot: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rollup(overrides?: CallOverrides): Promise<string>;

  "rollup()"(overrides?: CallOverrides): Promise<string>;

  setRollupAddress(
    _rollup: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRollupAddress(address)"(
    _rollup: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenRegistry(overrides?: CallOverrides): Promise<string>;

  "tokenRegistry()"(overrides?: CallOverrides): Promise<string>;

  vault(overrides?: CallOverrides): Promise<string>;

  "vault()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    babyTrees(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "babyTrees(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    babyTreesLength(overrides?: CallOverrides): Promise<BigNumber>;

    "babyTreesLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    back(overrides?: CallOverrides): Promise<BigNumber>;

    "back()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositCount(overrides?: CallOverrides): Promise<BigNumber>;

    "depositCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositFor(
      pubkeyID: BigNumberish,
      amount: BigNumberish,
      tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositFor(uint256,uint256,uint256)"(
      pubkeyID: BigNumberish,
      amount: BigNumberish,
      tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    dequeueToSubmit(overrides?: CallOverrides): Promise<string>;

    "dequeueToSubmit()"(overrides?: CallOverrides): Promise<string>;

    front(overrides?: CallOverrides): Promise<BigNumber>;

    "front()"(overrides?: CallOverrides): Promise<BigNumber>;

    paramMaxSubtreeSize(overrides?: CallOverrides): Promise<BigNumber>;

    "paramMaxSubtreeSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    queue(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "queue(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    reenqueue(subtreeRoot: BytesLike, overrides?: CallOverrides): Promise<void>;

    "reenqueue(bytes32)"(
      subtreeRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    rollup(overrides?: CallOverrides): Promise<string>;

    "rollup()"(overrides?: CallOverrides): Promise<string>;

    setRollupAddress(_rollup: string, overrides?: CallOverrides): Promise<void>;

    "setRollupAddress(address)"(
      _rollup: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenRegistry(overrides?: CallOverrides): Promise<string>;

    "tokenRegistry()"(overrides?: CallOverrides): Promise<string>;

    vault(overrides?: CallOverrides): Promise<string>;

    "vault()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    DepositQueued(pubkeyID: null, data: null): EventFilter;

    DepositSubTreeReady(root: null): EventFilter;
  };

  estimateGas: {
    babyTrees(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "babyTrees(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    babyTreesLength(overrides?: CallOverrides): Promise<BigNumber>;

    "babyTreesLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    back(overrides?: CallOverrides): Promise<BigNumber>;

    "back()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositCount(overrides?: CallOverrides): Promise<BigNumber>;

    "depositCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositFor(
      pubkeyID: BigNumberish,
      amount: BigNumberish,
      tokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositFor(uint256,uint256,uint256)"(
      pubkeyID: BigNumberish,
      amount: BigNumberish,
      tokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    dequeueToSubmit(overrides?: Overrides): Promise<BigNumber>;

    "dequeueToSubmit()"(overrides?: Overrides): Promise<BigNumber>;

    front(overrides?: CallOverrides): Promise<BigNumber>;

    "front()"(overrides?: CallOverrides): Promise<BigNumber>;

    paramMaxSubtreeSize(overrides?: CallOverrides): Promise<BigNumber>;

    "paramMaxSubtreeSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    queue(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "queue(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reenqueue(
      subtreeRoot: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "reenqueue(bytes32)"(
      subtreeRoot: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rollup(overrides?: CallOverrides): Promise<BigNumber>;

    "rollup()"(overrides?: CallOverrides): Promise<BigNumber>;

    setRollupAddress(
      _rollup: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRollupAddress(address)"(
      _rollup: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    "vault()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    babyTrees(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "babyTrees(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    babyTreesLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "babyTreesLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    back(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "back()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "depositCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositFor(
      pubkeyID: BigNumberish,
      amount: BigNumberish,
      tokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositFor(uint256,uint256,uint256)"(
      pubkeyID: BigNumberish,
      amount: BigNumberish,
      tokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    dequeueToSubmit(overrides?: Overrides): Promise<PopulatedTransaction>;

    "dequeueToSubmit()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    front(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "front()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paramMaxSubtreeSize(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "paramMaxSubtreeSize()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "queue(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reenqueue(
      subtreeRoot: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "reenqueue(bytes32)"(
      subtreeRoot: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rollup(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rollup()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRollupAddress(
      _rollup: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRollupAddress(address)"(
      _rollup: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenRegistry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
