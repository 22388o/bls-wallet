/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";

interface BatchManagerInterface extends ethers.utils.Interface {
  functions: {
    "batches(uint256)": FunctionFragment;
    "chooser()": FunctionFragment;
    "depositManager()": FunctionFragment;
    "deposits(uint256)": FunctionFragment;
    "getBatch(uint256)": FunctionFragment;
    "invalidBatchMarker()": FunctionFragment;
    "keepRollingBack()": FunctionFragment;
    "nextBatchID()": FunctionFragment;
    "paramBlocksToFinalise()": FunctionFragment;
    "paramMaxTxsPerCommit()": FunctionFragment;
    "paramMinGasLeft()": FunctionFragment;
    "paramStakeAmount()": FunctionFragment;
    "withdrawStake(uint256)": FunctionFragment;
    "withdrawalBitmap(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "batches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "chooser", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "invalidBatchMarker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "keepRollingBack",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextBatchID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paramBlocksToFinalise",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paramMaxTxsPerCommit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paramMinGasLeft",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paramStakeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalBitmap",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "batches", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chooser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "invalidBatchMarker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keepRollingBack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextBatchID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paramBlocksToFinalise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paramMaxTxsPerCommit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paramMinGasLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paramStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalBitmap",
    data: BytesLike
  ): Result;

  events: {
    "BatchRollback(uint256)": EventFragment;
    "NewBatch(address,uint256,uint8)": EventFragment;
    "RollbackFinalisation(uint256)": EventFragment;
    "StakeWithdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BatchRollback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RollbackFinalisation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeWithdraw"): EventFragment;
}

export class BatchManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BatchManagerInterface;

  functions: {
    batches(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      commitmentRoot: string;
      meta: string;
      0: string;
      1: string;
    }>;

    "batches(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      commitmentRoot: string;
      meta: string;
      0: string;
      1: string;
    }>;

    chooser(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "chooser()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    depositManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "depositManager()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    deposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "deposits(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getBatch(
      batchID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      batch: {commitmentRoot: string; meta: string; 0: string; 1: string};
      0: {commitmentRoot: string; meta: string; 0: string; 1: string};
    }>;

    "getBatch(uint256)"(
      batchID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      batch: {commitmentRoot: string; meta: string; 0: string; 1: string};
      0: {commitmentRoot: string; meta: string; 0: string; 1: string};
    }>;

    invalidBatchMarker(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "invalidBatchMarker()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    keepRollingBack(overrides?: Overrides): Promise<ContractTransaction>;

    "keepRollingBack()"(overrides?: Overrides): Promise<ContractTransaction>;

    nextBatchID(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "nextBatchID()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    paramBlocksToFinalise(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "paramBlocksToFinalise()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    paramMaxTxsPerCommit(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "paramMaxTxsPerCommit()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    paramMinGasLeft(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "paramMinGasLeft()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    paramStakeAmount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "paramStakeAmount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    withdrawStake(
      batchID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawStake(uint256)"(
      batchID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawalBitmap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "withdrawalBitmap(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  batches(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    commitmentRoot: string;
    meta: string;
    0: string;
    1: string;
  }>;

  "batches(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    commitmentRoot: string;
    meta: string;
    0: string;
    1: string;
  }>;

  chooser(overrides?: CallOverrides): Promise<string>;

  "chooser()"(overrides?: CallOverrides): Promise<string>;

  depositManager(overrides?: CallOverrides): Promise<string>;

  "depositManager()"(overrides?: CallOverrides): Promise<string>;

  deposits(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "deposits(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getBatch(
    batchID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{commitmentRoot: string; meta: string; 0: string; 1: string}>;

  "getBatch(uint256)"(
    batchID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{commitmentRoot: string; meta: string; 0: string; 1: string}>;

  invalidBatchMarker(overrides?: CallOverrides): Promise<BigNumber>;

  "invalidBatchMarker()"(overrides?: CallOverrides): Promise<BigNumber>;

  keepRollingBack(overrides?: Overrides): Promise<ContractTransaction>;

  "keepRollingBack()"(overrides?: Overrides): Promise<ContractTransaction>;

  nextBatchID(overrides?: CallOverrides): Promise<BigNumber>;

  "nextBatchID()"(overrides?: CallOverrides): Promise<BigNumber>;

  paramBlocksToFinalise(overrides?: CallOverrides): Promise<BigNumber>;

  "paramBlocksToFinalise()"(overrides?: CallOverrides): Promise<BigNumber>;

  paramMaxTxsPerCommit(overrides?: CallOverrides): Promise<BigNumber>;

  "paramMaxTxsPerCommit()"(overrides?: CallOverrides): Promise<BigNumber>;

  paramMinGasLeft(overrides?: CallOverrides): Promise<BigNumber>;

  "paramMinGasLeft()"(overrides?: CallOverrides): Promise<BigNumber>;

  paramStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "paramStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawStake(
    batchID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawStake(uint256)"(
    batchID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawalBitmap(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "withdrawalBitmap(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    batches(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      commitmentRoot: string;
      meta: string;
      0: string;
      1: string;
    }>;

    "batches(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      commitmentRoot: string;
      meta: string;
      0: string;
      1: string;
    }>;

    chooser(overrides?: CallOverrides): Promise<string>;

    "chooser()"(overrides?: CallOverrides): Promise<string>;

    depositManager(overrides?: CallOverrides): Promise<string>;

    "depositManager()"(overrides?: CallOverrides): Promise<string>;

    deposits(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "deposits(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getBatch(
      batchID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{commitmentRoot: string; meta: string; 0: string; 1: string}>;

    "getBatch(uint256)"(
      batchID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{commitmentRoot: string; meta: string; 0: string; 1: string}>;

    invalidBatchMarker(overrides?: CallOverrides): Promise<BigNumber>;

    "invalidBatchMarker()"(overrides?: CallOverrides): Promise<BigNumber>;

    keepRollingBack(overrides?: CallOverrides): Promise<void>;

    "keepRollingBack()"(overrides?: CallOverrides): Promise<void>;

    nextBatchID(overrides?: CallOverrides): Promise<BigNumber>;

    "nextBatchID()"(overrides?: CallOverrides): Promise<BigNumber>;

    paramBlocksToFinalise(overrides?: CallOverrides): Promise<BigNumber>;

    "paramBlocksToFinalise()"(overrides?: CallOverrides): Promise<BigNumber>;

    paramMaxTxsPerCommit(overrides?: CallOverrides): Promise<BigNumber>;

    "paramMaxTxsPerCommit()"(overrides?: CallOverrides): Promise<BigNumber>;

    paramMinGasLeft(overrides?: CallOverrides): Promise<BigNumber>;

    "paramMinGasLeft()"(overrides?: CallOverrides): Promise<BigNumber>;

    paramStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "paramStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawStake(
      batchID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawStake(uint256)"(
      batchID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawalBitmap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawalBitmap(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    BatchRollback(batchID: null): EventFilter;

    NewBatch(committer: null, index: null, batchType: null): EventFilter;

    RollbackFinalisation(totalBatchesSlashed: null): EventFilter;

    StakeWithdraw(committed: null, batchID: null): EventFilter;
  };

  estimateGas: {
    batches(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "batches(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chooser(overrides?: CallOverrides): Promise<BigNumber>;

    "chooser()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositManager(overrides?: CallOverrides): Promise<BigNumber>;

    "depositManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposits(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "deposits(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBatch(
      batchID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBatch(uint256)"(
      batchID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invalidBatchMarker(overrides?: CallOverrides): Promise<BigNumber>;

    "invalidBatchMarker()"(overrides?: CallOverrides): Promise<BigNumber>;

    keepRollingBack(overrides?: Overrides): Promise<BigNumber>;

    "keepRollingBack()"(overrides?: Overrides): Promise<BigNumber>;

    nextBatchID(overrides?: CallOverrides): Promise<BigNumber>;

    "nextBatchID()"(overrides?: CallOverrides): Promise<BigNumber>;

    paramBlocksToFinalise(overrides?: CallOverrides): Promise<BigNumber>;

    "paramBlocksToFinalise()"(overrides?: CallOverrides): Promise<BigNumber>;

    paramMaxTxsPerCommit(overrides?: CallOverrides): Promise<BigNumber>;

    "paramMaxTxsPerCommit()"(overrides?: CallOverrides): Promise<BigNumber>;

    paramMinGasLeft(overrides?: CallOverrides): Promise<BigNumber>;

    "paramMinGasLeft()"(overrides?: CallOverrides): Promise<BigNumber>;

    paramStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "paramStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawStake(
      batchID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawStake(uint256)"(
      batchID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawalBitmap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawalBitmap(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batches(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "batches(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chooser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "chooser()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "depositManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deposits(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBatch(
      batchID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBatch(uint256)"(
      batchID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invalidBatchMarker(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "invalidBatchMarker()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keepRollingBack(overrides?: Overrides): Promise<PopulatedTransaction>;

    "keepRollingBack()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    nextBatchID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nextBatchID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paramBlocksToFinalise(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "paramBlocksToFinalise()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paramMaxTxsPerCommit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "paramMaxTxsPerCommit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paramMinGasLeft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paramMinGasLeft()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paramStakeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paramStakeAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawStake(
      batchID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawStake(uint256)"(
      batchID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawalBitmap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "withdrawalBitmap(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
