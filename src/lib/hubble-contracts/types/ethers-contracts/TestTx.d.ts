/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides
} from "@ethersproject/contracts";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";

interface TestTxInterface extends ethers.utils.Interface {
  functions: {
    "create2TransferDecode(bytes,uint256)": FunctionFragment;
    "create2TransferMessageOf(bytes,uint256,uint256,uint256[4])": FunctionFragment;
    "create2transferHasExcessData(bytes)": FunctionFragment;
    "create2transferSerialize(tuple[])": FunctionFragment;
    "create2transferSize(bytes)": FunctionFragment;
    "massMigrationDecode(bytes,uint256)": FunctionFragment;
    "massMigrationSize(bytes)": FunctionFragment;
    "testEncodeDecimal(uint256)": FunctionFragment;
    "testMassMigrationMessageOf(tuple,uint256,uint256)": FunctionFragment;
    "transferDecode(bytes,uint256)": FunctionFragment;
    "transferHasExcessData(bytes)": FunctionFragment;
    "transferMessageOf(bytes,uint256,uint256)": FunctionFragment;
    "transferSerialize(tuple[])": FunctionFragment;
    "transferSize(bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "create2TransferDecode",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "create2TransferMessageOf",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "create2transferHasExcessData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "create2transferSerialize",
    values: [
      {
        fromIndex: BigNumberish;
        toIndex: BigNumberish;
        toPubkeyID: BigNumberish;
        amount: BigNumberish;
        fee: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "create2transferSize",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "massMigrationDecode",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "massMigrationSize",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testEncodeDecimal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testMassMigrationMessageOf",
    values: [
      {fromIndex: BigNumberish; amount: BigNumberish; fee: BigNumberish},
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferDecode",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferHasExcessData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferMessageOf",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferSerialize",
    values: [
      {
        fromIndex: BigNumberish;
        toIndex: BigNumberish;
        amount: BigNumberish;
        fee: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferSize",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "create2TransferDecode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "create2TransferMessageOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "create2transferHasExcessData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "create2transferSerialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "create2transferSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massMigrationDecode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massMigrationSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testEncodeDecimal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testMassMigrationMessageOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferDecode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferHasExcessData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferMessageOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferSerialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferSize",
    data: BytesLike
  ): Result;

  events: {};
}

export class TestTx extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TestTxInterface;

  functions: {
    create2TransferDecode(
      txs: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        fromIndex: BigNumber;
        toIndex: BigNumber;
        toPubkeyID: BigNumber;
        amount: BigNumber;
        fee: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
      };
    }>;

    "create2TransferDecode(bytes,uint256)"(
      txs: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        fromIndex: BigNumber;
        toIndex: BigNumber;
        toPubkeyID: BigNumber;
        amount: BigNumber;
        fee: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
      };
    }>;

    create2TransferMessageOf(
      txs: BytesLike,
      index: BigNumberish,
      nonce: BigNumberish,
      to: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "create2TransferMessageOf(bytes,uint256,uint256,uint256[4])"(
      txs: BytesLike,
      index: BigNumberish,
      nonce: BigNumberish,
      to: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    create2transferHasExcessData(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "create2transferHasExcessData(bytes)"(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    create2transferSerialize(
      txs: {
        fromIndex: BigNumberish;
        toIndex: BigNumberish;
        toPubkeyID: BigNumberish;
        amount: BigNumberish;
        fee: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "create2transferSerialize(tuple[])"(
      txs: {
        fromIndex: BigNumberish;
        toIndex: BigNumberish;
        toPubkeyID: BigNumberish;
        amount: BigNumberish;
        fee: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    create2transferSize(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "create2transferSize(bytes)"(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    massMigrationDecode(
      txs: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _tx: {
        fromIndex: BigNumber;
        amount: BigNumber;
        fee: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
      };
      0: {
        fromIndex: BigNumber;
        amount: BigNumber;
        fee: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
      };
    }>;

    "massMigrationDecode(bytes,uint256)"(
      txs: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _tx: {
        fromIndex: BigNumber;
        amount: BigNumber;
        fee: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
      };
      0: {
        fromIndex: BigNumber;
        amount: BigNumber;
        fee: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
      };
    }>;

    massMigrationSize(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "massMigrationSize(bytes)"(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    testEncodeDecimal(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "testEncodeDecimal(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    testMassMigrationMessageOf(
      _tx: {fromIndex: BigNumberish; amount: BigNumberish; fee: BigNumberish},
      nonce: BigNumberish,
      spokeID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "testMassMigrationMessageOf(tuple,uint256,uint256)"(
      _tx: {fromIndex: BigNumberish; amount: BigNumberish; fee: BigNumberish},
      nonce: BigNumberish,
      spokeID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    transferDecode(
      txs: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        fromIndex: BigNumber;
        toIndex: BigNumber;
        amount: BigNumber;
        fee: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
      };
    }>;

    "transferDecode(bytes,uint256)"(
      txs: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        fromIndex: BigNumber;
        toIndex: BigNumber;
        amount: BigNumber;
        fee: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
      };
    }>;

    transferHasExcessData(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "transferHasExcessData(bytes)"(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    transferMessageOf(
      txs: BytesLike,
      index: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "transferMessageOf(bytes,uint256,uint256)"(
      txs: BytesLike,
      index: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    transferSerialize(
      txs: {
        fromIndex: BigNumberish;
        toIndex: BigNumberish;
        amount: BigNumberish;
        fee: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "transferSerialize(tuple[])"(
      txs: {
        fromIndex: BigNumberish;
        toIndex: BigNumberish;
        amount: BigNumberish;
        fee: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    transferSize(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "transferSize(bytes)"(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  create2TransferDecode(
    txs: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    fromIndex: BigNumber;
    toIndex: BigNumber;
    toPubkeyID: BigNumber;
    amount: BigNumber;
    fee: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  "create2TransferDecode(bytes,uint256)"(
    txs: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    fromIndex: BigNumber;
    toIndex: BigNumber;
    toPubkeyID: BigNumber;
    amount: BigNumber;
    fee: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  create2TransferMessageOf(
    txs: BytesLike,
    index: BigNumberish,
    nonce: BigNumberish,
    to: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<string>;

  "create2TransferMessageOf(bytes,uint256,uint256,uint256[4])"(
    txs: BytesLike,
    index: BigNumberish,
    nonce: BigNumberish,
    to: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<string>;

  create2transferHasExcessData(
    txs: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "create2transferHasExcessData(bytes)"(
    txs: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  create2transferSerialize(
    txs: {
      fromIndex: BigNumberish;
      toIndex: BigNumberish;
      toPubkeyID: BigNumberish;
      amount: BigNumberish;
      fee: BigNumberish;
    }[],
    overrides?: CallOverrides
  ): Promise<string>;

  "create2transferSerialize(tuple[])"(
    txs: {
      fromIndex: BigNumberish;
      toIndex: BigNumberish;
      toPubkeyID: BigNumberish;
      amount: BigNumberish;
      fee: BigNumberish;
    }[],
    overrides?: CallOverrides
  ): Promise<string>;

  create2transferSize(
    txs: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "create2transferSize(bytes)"(
    txs: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  massMigrationDecode(
    txs: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    fromIndex: BigNumber;
    amount: BigNumber;
    fee: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "massMigrationDecode(bytes,uint256)"(
    txs: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    fromIndex: BigNumber;
    amount: BigNumber;
    fee: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  massMigrationSize(
    txs: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "massMigrationSize(bytes)"(
    txs: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  testEncodeDecimal(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "testEncodeDecimal(uint256)"(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  testMassMigrationMessageOf(
    _tx: {fromIndex: BigNumberish; amount: BigNumberish; fee: BigNumberish},
    nonce: BigNumberish,
    spokeID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "testMassMigrationMessageOf(tuple,uint256,uint256)"(
    _tx: {fromIndex: BigNumberish; amount: BigNumberish; fee: BigNumberish},
    nonce: BigNumberish,
    spokeID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  transferDecode(
    txs: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    fromIndex: BigNumber;
    toIndex: BigNumber;
    amount: BigNumber;
    fee: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  "transferDecode(bytes,uint256)"(
    txs: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    fromIndex: BigNumber;
    toIndex: BigNumber;
    amount: BigNumber;
    fee: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  transferHasExcessData(
    txs: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "transferHasExcessData(bytes)"(
    txs: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferMessageOf(
    txs: BytesLike,
    index: BigNumberish,
    nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "transferMessageOf(bytes,uint256,uint256)"(
    txs: BytesLike,
    index: BigNumberish,
    nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  transferSerialize(
    txs: {
      fromIndex: BigNumberish;
      toIndex: BigNumberish;
      amount: BigNumberish;
      fee: BigNumberish;
    }[],
    overrides?: CallOverrides
  ): Promise<string>;

  "transferSerialize(tuple[])"(
    txs: {
      fromIndex: BigNumberish;
      toIndex: BigNumberish;
      amount: BigNumberish;
      fee: BigNumberish;
    }[],
    overrides?: CallOverrides
  ): Promise<string>;

  transferSize(txs: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "transferSize(bytes)"(
    txs: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    create2TransferDecode(
      txs: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      fromIndex: BigNumber;
      toIndex: BigNumber;
      toPubkeyID: BigNumber;
      amount: BigNumber;
      fee: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    "create2TransferDecode(bytes,uint256)"(
      txs: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      fromIndex: BigNumber;
      toIndex: BigNumber;
      toPubkeyID: BigNumber;
      amount: BigNumber;
      fee: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    create2TransferMessageOf(
      txs: BytesLike,
      index: BigNumberish,
      nonce: BigNumberish,
      to: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    "create2TransferMessageOf(bytes,uint256,uint256,uint256[4])"(
      txs: BytesLike,
      index: BigNumberish,
      nonce: BigNumberish,
      to: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    create2transferHasExcessData(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "create2transferHasExcessData(bytes)"(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    create2transferSerialize(
      txs: {
        fromIndex: BigNumberish;
        toIndex: BigNumberish;
        toPubkeyID: BigNumberish;
        amount: BigNumberish;
        fee: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<string>;

    "create2transferSerialize(tuple[])"(
      txs: {
        fromIndex: BigNumberish;
        toIndex: BigNumberish;
        toPubkeyID: BigNumberish;
        amount: BigNumberish;
        fee: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<string>;

    create2transferSize(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "create2transferSize(bytes)"(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    massMigrationDecode(
      txs: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      fromIndex: BigNumber;
      amount: BigNumber;
      fee: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "massMigrationDecode(bytes,uint256)"(
      txs: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      fromIndex: BigNumber;
      amount: BigNumber;
      fee: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    massMigrationSize(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "massMigrationSize(bytes)"(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testEncodeDecimal(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "testEncodeDecimal(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testMassMigrationMessageOf(
      _tx: {fromIndex: BigNumberish; amount: BigNumberish; fee: BigNumberish},
      nonce: BigNumberish,
      spokeID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "testMassMigrationMessageOf(tuple,uint256,uint256)"(
      _tx: {fromIndex: BigNumberish; amount: BigNumberish; fee: BigNumberish},
      nonce: BigNumberish,
      spokeID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transferDecode(
      txs: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      fromIndex: BigNumber;
      toIndex: BigNumber;
      amount: BigNumber;
      fee: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "transferDecode(bytes,uint256)"(
      txs: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      fromIndex: BigNumber;
      toIndex: BigNumber;
      amount: BigNumber;
      fee: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    transferHasExcessData(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferHasExcessData(bytes)"(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferMessageOf(
      txs: BytesLike,
      index: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "transferMessageOf(bytes,uint256,uint256)"(
      txs: BytesLike,
      index: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transferSerialize(
      txs: {
        fromIndex: BigNumberish;
        toIndex: BigNumberish;
        amount: BigNumberish;
        fee: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<string>;

    "transferSerialize(tuple[])"(
      txs: {
        fromIndex: BigNumberish;
        toIndex: BigNumberish;
        amount: BigNumberish;
        fee: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<string>;

    transferSize(txs: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "transferSize(bytes)"(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    create2TransferDecode(
      txs: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "create2TransferDecode(bytes,uint256)"(
      txs: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create2TransferMessageOf(
      txs: BytesLike,
      index: BigNumberish,
      nonce: BigNumberish,
      to: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "create2TransferMessageOf(bytes,uint256,uint256,uint256[4])"(
      txs: BytesLike,
      index: BigNumberish,
      nonce: BigNumberish,
      to: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create2transferHasExcessData(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "create2transferHasExcessData(bytes)"(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create2transferSerialize(
      txs: {
        fromIndex: BigNumberish;
        toIndex: BigNumberish;
        toPubkeyID: BigNumberish;
        amount: BigNumberish;
        fee: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "create2transferSerialize(tuple[])"(
      txs: {
        fromIndex: BigNumberish;
        toIndex: BigNumberish;
        toPubkeyID: BigNumberish;
        amount: BigNumberish;
        fee: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create2transferSize(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "create2transferSize(bytes)"(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    massMigrationDecode(
      txs: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "massMigrationDecode(bytes,uint256)"(
      txs: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    massMigrationSize(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "massMigrationSize(bytes)"(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testEncodeDecimal(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "testEncodeDecimal(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testMassMigrationMessageOf(
      _tx: {fromIndex: BigNumberish; amount: BigNumberish; fee: BigNumberish},
      nonce: BigNumberish,
      spokeID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "testMassMigrationMessageOf(tuple,uint256,uint256)"(
      _tx: {fromIndex: BigNumberish; amount: BigNumberish; fee: BigNumberish},
      nonce: BigNumberish,
      spokeID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferDecode(
      txs: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "transferDecode(bytes,uint256)"(
      txs: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferHasExcessData(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "transferHasExcessData(bytes)"(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferMessageOf(
      txs: BytesLike,
      index: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "transferMessageOf(bytes,uint256,uint256)"(
      txs: BytesLike,
      index: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferSerialize(
      txs: {
        fromIndex: BigNumberish;
        toIndex: BigNumberish;
        amount: BigNumberish;
        fee: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "transferSerialize(tuple[])"(
      txs: {
        fromIndex: BigNumberish;
        toIndex: BigNumberish;
        amount: BigNumberish;
        fee: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferSize(txs: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "transferSize(bytes)"(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    create2TransferDecode(
      txs: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "create2TransferDecode(bytes,uint256)"(
      txs: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    create2TransferMessageOf(
      txs: BytesLike,
      index: BigNumberish,
      nonce: BigNumberish,
      to: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "create2TransferMessageOf(bytes,uint256,uint256,uint256[4])"(
      txs: BytesLike,
      index: BigNumberish,
      nonce: BigNumberish,
      to: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    create2transferHasExcessData(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "create2transferHasExcessData(bytes)"(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    create2transferSerialize(
      txs: {
        fromIndex: BigNumberish;
        toIndex: BigNumberish;
        toPubkeyID: BigNumberish;
        amount: BigNumberish;
        fee: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "create2transferSerialize(tuple[])"(
      txs: {
        fromIndex: BigNumberish;
        toIndex: BigNumberish;
        toPubkeyID: BigNumberish;
        amount: BigNumberish;
        fee: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    create2transferSize(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "create2transferSize(bytes)"(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    massMigrationDecode(
      txs: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "massMigrationDecode(bytes,uint256)"(
      txs: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    massMigrationSize(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "massMigrationSize(bytes)"(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testEncodeDecimal(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "testEncodeDecimal(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testMassMigrationMessageOf(
      _tx: {fromIndex: BigNumberish; amount: BigNumberish; fee: BigNumberish},
      nonce: BigNumberish,
      spokeID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "testMassMigrationMessageOf(tuple,uint256,uint256)"(
      _tx: {fromIndex: BigNumberish; amount: BigNumberish; fee: BigNumberish},
      nonce: BigNumberish,
      spokeID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferDecode(
      txs: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "transferDecode(bytes,uint256)"(
      txs: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferHasExcessData(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "transferHasExcessData(bytes)"(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferMessageOf(
      txs: BytesLike,
      index: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "transferMessageOf(bytes,uint256,uint256)"(
      txs: BytesLike,
      index: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferSerialize(
      txs: {
        fromIndex: BigNumberish;
        toIndex: BigNumberish;
        amount: BigNumberish;
        fee: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "transferSerialize(tuple[])"(
      txs: {
        fromIndex: BigNumberish;
        toIndex: BigNumberish;
        amount: BigNumberish;
        fee: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferSize(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "transferSize(bytes)"(
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
