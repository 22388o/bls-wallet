/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Signer} from "ethers";
import {Provider, TransactionRequest} from "@ethersproject/providers";
import {Contract, ContractFactory, Overrides} from "@ethersproject/contracts";

import {TestMerkleTree} from "./TestMerkleTree";

export class TestMerkleTreeFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<TestMerkleTree> {
    return super.deploy(overrides || {}) as Promise<TestMerkleTree>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestMerkleTree {
    return super.attach(address) as TestMerkleTree;
  }
  connect(signer: Signer): TestMerkleTreeFactory {
    return super.connect(signer) as TestMerkleTreeFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestMerkleTree {
    return new Contract(address, _abi, signerOrProvider) as TestMerkleTree;
  }
}

const _abi = [
  {
    constant: false,
    inputs: [
      {
        internalType: "uint256",
        name: "level",
        type: "uint256"
      }
    ],
    name: "testGetRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "bytes32[]",
        name: "nodes",
        type: "bytes32[]"
      }
    ],
    name: "testMerklise",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "bytes32",
        name: "root",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "leaf",
        type: "bytes32"
      },
      {
        internalType: "uint256",
        name: "path",
        type: "uint256"
      },
      {
        internalType: "bytes32[]",
        name: "witness",
        type: "bytes32[]"
      }
    ],
    name: "testVerify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610c08806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634aacc48a14610046578063a9df658814610070578063d431878b14610083575b600080fd5b610059610054366004610aad565b6100a4565b604051610067929190610b37565b60405180910390f35b61005961007e3660046109f7565b6100c8565b610096610091366004610a34565b6100db565b604051610067929190610b1c565b60008060005a905060006100b785610105565b9050805a8303935093505050915091565b60008060005a905060006100b785610600565b60008060005a905060006100f188888888610865565b9050805a9099920397509095505050505050565b600061010f61092a565b7f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56381527f633dc4d7da7256660a892f8f1604a44b5432649cc8ec5cb3ced4c4e6ac94dd1d6020808301919091527f890740a8eb06ce9be422cb8da5cdafc2b58c0a5e24036c578de2a433c828ff7d60408301527f3b8ec09e026fdc305365dfc94e189a81b38c7597b3d941c279f042e8206e0bd860608301527fecd50eee38e386bd62be9bedb990706951b65fe053bd9d8a521af753d139e2da60808301527fdefff6d330bb5403f63b14f33b578274160de3a50df4efecf0e0db73bcdd3da560a08301527f617bdd11f7c0a11f49db22f629387a12da7596f9d1704d7465177c63d88ec7d760c08301527f292c23a9aa1d8bea7e2435e555a4a60e379a5a35f3f452bae60121073fb6eead60e08301527fe1cea92ed99acdcb045a6726b2f87107e8a61620a232cf4d7d5b5766b3952e106101008301527f7ad66c0a68c72cb89e4fb4303841966e4062a76ab97451e3b9fb526a5ceb7f826101208301527fe026cc5a4aed3c22a58cbd3d2ac754c9352c5436f638042dca99034e836365166101408301527f3d04cffd8b46a874edf5cfae63077de85f849a660426697b06a829c70dd1409c6101608301527fad676aa337a485e4728a0b240d92b3ef7b3c372d06d189322bfd5f61f1e7203e6101808301527fa2fca4a49658f9fab7aa63289c91b7c7b6c832a6d0e69334ff5b0a3483d09dab6101a08301527f4ebfd9cd7bca2505f7bef59cc1c12ecc708fff26ae4af19abe852afe9e20c8626101c08301527f2def10d13dd169f550f578bda343d9717a138562e0093b380a1120789d53cf106101e08301527f776a31db34a1a0a7caaf862cffdfff1789297ffadc380bd3d39281d340abd3ad6102008301527fe2e7610b87a5fdf3a72ebe271287d923ab990eefac64b6e59d79f8b7e08c46e36102208301527f504364a5c6858bf98fff714ab5be9de19ed31a976860efbd0e772a2efe23e2e06102408301527f4f05f4acb83f5b65168d9fef89d56d4d77b8944015e6b1eed81b0238e2d0dba36102608301527f44a6d974c75b07423e1d6d33f481916fdd45830aea11b6347e700cd8b9f0767c6102808301527fedf260291f734ddac396a956127dde4c34c0cfb8d8052f88ac139658ccf2d5076102a08301527f6075c657a105351e7f0fce53bc320113324a522e8fd52dc878c762551e01a46e6102c08301527f6ca6a3f763a9395f7da16014725ca7ee17e4815c0ff8119bf33f273dee11833b6102e08301527f1c25ef10ffeb3c7d08aa707d17286e0b0d3cbcb50f1bd3b6523b63ba3b52dd0f6103008301527ffffc43bd08273ccf135fd3cacbeef055418e09eb728d727c4d5d5c556cdea7e36103208301527fc5ab8111456b1f28f3c7a0a604b4553ce905cb019c463ee159137af83c350b226103408301527f0ff273fcbf4ae0f2bd88d6cf319ff4004f8d7dca70d4ced4e74d2c74139739e66103608301527f7fa06ba11241ddd5efdc65d4e39c9f6991b74fd4b81b62230808216c876f827c6103808301527f7e275adf313a996c7e2950cac67caba02a5ff925ebf9906b58949f3e77aec5b96103a08301527f8f6162fa308d2b3a15dc33cffac85f13ab349173121645aedf00f471663108be6103c08301527f78ccaaab73373552f207a63599de54d7d8d0c1805f86ce7da15818d09f4cff626103e08301528190849081106105f457fe5b60200201519392505050565b600060208251111561062d5760405162461bcd60e51b815260040161062490610b45565b60405180910390fd5b610635610949565b7f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56381527f633dc4d7da7256660a892f8f1604a44b5432649cc8ec5cb3ced4c4e6ac94dd1d60208201527f890740a8eb06ce9be422cb8da5cdafc2b58c0a5e24036c578de2a433c828ff7d60408201527f3b8ec09e026fdc305365dfc94e189a81b38c7597b3d941c279f042e8206e0bd860608201527fecd50eee38e386bd62be9bedb990706951b65fe053bd9d8a521af753d139e2da60808201527fdefff6d330bb5403f63b14f33b578274160de3a50df4efecf0e0db73bcdd3da560a082015282516001818116918101901c60005b60005b8383038110156107ad576000600182901b905087818151811061074757fe5b602002602001015188826001018151811061075e57fe5b6020026020010151604051602001610777929190610b37565b6040516020818303038152906040528051906020012088838151811061079957fe5b602090810291909101015250600101610728565b83600114156108225786600182901b815181106107c657fe5b60200260200101518583600681106107da57fe5b602002015160001b6040516020016107f3929190610b37565b6040516020818303038152906040528051906020012087828151811061081557fe5b6020026020010181815250505b82600114156108315750610845565b5060018083169350918201821c9101610725565b8560008151811061085257fe5b6020026020010151945050505050919050565b60008461087385858561087d565b1495945050505050565b600083815b835181101561091f57600185821c166108d857818482815181106108a257fe5b60200260200101516040516020016108bb929190610b37565b604051602081830303815290604052805190602001209150610917565b8381815181106108e457fe5b6020026020010151826040516020016108fe929190610b37565b6040516020818303038152906040528051906020012091505b600101610882565b5090505b9392505050565b6040518061040001604052806020906020820280388339509192915050565b6040518060c001604052806006906020820280388339509192915050565b600082601f83011261097857600080fd5b813561098b61098682610b7c565b610b55565b915081818352602084019350602081019050838560208402820111156109b057600080fd5b60005b838110156109dc57816109c688826109e6565b84525060209283019291909101906001016109b3565b5050505092915050565b80356109f181610bae565b92915050565b600060208284031215610a0957600080fd5b813567ffffffffffffffff811115610a2057600080fd5b610a2c84828501610967565b949350505050565b60008060008060808587031215610a4a57600080fd5b6000610a5687876109e6565b9450506020610a67878288016109e6565b9350506040610a78878288016109e6565b925050606085013567ffffffffffffffff811115610a9557600080fd5b610aa187828801610967565b91505092959194509250565b600060208284031215610abf57600080fd5b6000610a2c84846109e6565b610ad481610ba6565b82525050565b610ad481610bab565b6000610af0601a83610b9d565b7f4d65726b6c65547265653a20546f6f206d616e79206e6f646573000000000000815260200192915050565b60408101610b2a8285610acb565b6109236020830184610ada565b60408101610b2a8285610ada565b602080825281016109f181610ae3565b60405181810167ffffffffffffffff81118282101715610b7457600080fd5b604052919050565b600067ffffffffffffffff821115610b9357600080fd5b5060209081020190565b90815260200190565b151590565b90565b610bb781610bab565b8114610bc257600080fd5b5056fea365627a7a72315820c587b0d0935ea308d7981ada97a84fc0c6d6fcd6d11e289cd88e9e60c6405f106c6578706572696d656e74616cf564736f6c634300050f0040";
