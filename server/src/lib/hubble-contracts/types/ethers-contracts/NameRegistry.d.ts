/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";

interface NameRegistryInterface extends ethers.utils.Interface {
  functions: {
    "getContractDetails(bytes32)": FunctionFragment;
    "registerName(bytes32,address)": FunctionFragment;
    "registry(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getContractDetails",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerName",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "registry", values: [BytesLike]): string;

  decodeFunctionResult(
    functionFragment: "getContractDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;

  events: {
    "RegisteredNewContract(bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RegisteredNewContract"): EventFragment;
}

export class NameRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: NameRegistryInterface;

  functions: {
    getContractDetails(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getContractDetails(bytes32)"(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    registerName(
      name: BytesLike,
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerName(bytes32,address)"(
      name: BytesLike,
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registry(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      contractAddress: string;
      0: string;
    }>;

    "registry(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      contractAddress: string;
      0: string;
    }>;
  };

  getContractDetails(
    name: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getContractDetails(bytes32)"(
    name: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  registerName(
    name: BytesLike,
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerName(bytes32,address)"(
    name: BytesLike,
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registry(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "registry(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    getContractDetails(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getContractDetails(bytes32)"(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    registerName(
      name: BytesLike,
      addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "registerName(bytes32,address)"(
      name: BytesLike,
      addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registry(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "registry(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    RegisteredNewContract(name: null, contractAddr: null): EventFilter;
  };

  estimateGas: {
    getContractDetails(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getContractDetails(bytes32)"(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerName(
      name: BytesLike,
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "registerName(bytes32,address)"(
      name: BytesLike,
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    registry(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "registry(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getContractDetails(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getContractDetails(bytes32)"(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerName(
      name: BytesLike,
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerName(bytes32,address)"(
      name: BytesLike,
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registry(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "registry(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
