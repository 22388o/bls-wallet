/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides
} from "@ethersproject/contracts";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";

interface SubtreeQueueInterface extends ethers.utils.Interface {
  functions: {
    "back()": FunctionFragment;
    "front()": FunctionFragment;
    "queue(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "back", values?: undefined): string;
  encodeFunctionData(functionFragment: "front", values?: undefined): string;
  encodeFunctionData(functionFragment: "queue", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "back", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "front", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queue", data: BytesLike): Result;

  events: {};
}

export class SubtreeQueue extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SubtreeQueueInterface;

  functions: {
    back(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "back()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    front(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "front()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    queue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "queue(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  back(overrides?: CallOverrides): Promise<BigNumber>;

  "back()"(overrides?: CallOverrides): Promise<BigNumber>;

  front(overrides?: CallOverrides): Promise<BigNumber>;

  "front()"(overrides?: CallOverrides): Promise<BigNumber>;

  queue(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "queue(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    back(overrides?: CallOverrides): Promise<BigNumber>;

    "back()"(overrides?: CallOverrides): Promise<BigNumber>;

    front(overrides?: CallOverrides): Promise<BigNumber>;

    "front()"(overrides?: CallOverrides): Promise<BigNumber>;

    queue(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "queue(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    back(overrides?: CallOverrides): Promise<BigNumber>;

    "back()"(overrides?: CallOverrides): Promise<BigNumber>;

    front(overrides?: CallOverrides): Promise<BigNumber>;

    "front()"(overrides?: CallOverrides): Promise<BigNumber>;

    queue(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "queue(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    back(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "back()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    front(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "front()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "queue(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
