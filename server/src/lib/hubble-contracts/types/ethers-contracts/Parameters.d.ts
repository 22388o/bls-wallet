/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides
} from "@ethersproject/contracts";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";

interface ParametersInterface extends ethers.utils.Interface {
  functions: {
    "paramBlocksToFinalise()": FunctionFragment;
    "paramMaxTxsPerCommit()": FunctionFragment;
    "paramMinGasLeft()": FunctionFragment;
    "paramStakeAmount()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "paramBlocksToFinalise",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paramMaxTxsPerCommit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paramMinGasLeft",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paramStakeAmount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "paramBlocksToFinalise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paramMaxTxsPerCommit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paramMinGasLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paramStakeAmount",
    data: BytesLike
  ): Result;

  events: {};
}

export class Parameters extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ParametersInterface;

  functions: {
    paramBlocksToFinalise(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "paramBlocksToFinalise()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    paramMaxTxsPerCommit(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "paramMaxTxsPerCommit()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    paramMinGasLeft(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "paramMinGasLeft()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    paramStakeAmount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "paramStakeAmount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  paramBlocksToFinalise(overrides?: CallOverrides): Promise<BigNumber>;

  "paramBlocksToFinalise()"(overrides?: CallOverrides): Promise<BigNumber>;

  paramMaxTxsPerCommit(overrides?: CallOverrides): Promise<BigNumber>;

  "paramMaxTxsPerCommit()"(overrides?: CallOverrides): Promise<BigNumber>;

  paramMinGasLeft(overrides?: CallOverrides): Promise<BigNumber>;

  "paramMinGasLeft()"(overrides?: CallOverrides): Promise<BigNumber>;

  paramStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "paramStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    paramBlocksToFinalise(overrides?: CallOverrides): Promise<BigNumber>;

    "paramBlocksToFinalise()"(overrides?: CallOverrides): Promise<BigNumber>;

    paramMaxTxsPerCommit(overrides?: CallOverrides): Promise<BigNumber>;

    "paramMaxTxsPerCommit()"(overrides?: CallOverrides): Promise<BigNumber>;

    paramMinGasLeft(overrides?: CallOverrides): Promise<BigNumber>;

    "paramMinGasLeft()"(overrides?: CallOverrides): Promise<BigNumber>;

    paramStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "paramStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    paramBlocksToFinalise(overrides?: CallOverrides): Promise<BigNumber>;

    "paramBlocksToFinalise()"(overrides?: CallOverrides): Promise<BigNumber>;

    paramMaxTxsPerCommit(overrides?: CallOverrides): Promise<BigNumber>;

    "paramMaxTxsPerCommit()"(overrides?: CallOverrides): Promise<BigNumber>;

    paramMinGasLeft(overrides?: CallOverrides): Promise<BigNumber>;

    "paramMinGasLeft()"(overrides?: CallOverrides): Promise<BigNumber>;

    paramStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "paramStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    paramBlocksToFinalise(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "paramBlocksToFinalise()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paramMaxTxsPerCommit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "paramMaxTxsPerCommit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paramMinGasLeft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paramMinGasLeft()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paramStakeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paramStakeAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
