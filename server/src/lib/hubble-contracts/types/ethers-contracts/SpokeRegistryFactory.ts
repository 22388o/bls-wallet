/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Signer} from "ethers";
import {Provider, TransactionRequest} from "@ethersproject/providers";
import {Contract, ContractFactory, Overrides} from "@ethersproject/contracts";

import {SpokeRegistry} from "./SpokeRegistry";

export class SpokeRegistryFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<SpokeRegistry> {
    return super.deploy(overrides || {}) as Promise<SpokeRegistry>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SpokeRegistry {
    return super.attach(address) as SpokeRegistry;
  }
  connect(signer: Signer): SpokeRegistryFactory {
    return super.connect(signer) as SpokeRegistryFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SpokeRegistry {
    return new Contract(address, _abi, signerOrProvider) as SpokeRegistry;
  }
}

const _abi = [
  {
    constant: false,
    inputs: [
      {
        internalType: "uint256",
        name: "spokeID",
        type: "uint256"
      }
    ],
    name: "getSpokeAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "numSpokes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "address",
        name: "spokeContract",
        type: "address"
      }
    ],
    name: "registerSpoke",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "registeredSpokes",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610192806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806350177aef146100515780639307139714610079578063d9bc6c2414610093578063da2fd3df146100cc575b600080fd5b6100776004803603602081101561006757600080fd5b50356001600160a01b03166100e9565b005b610081610121565b60408051918252519081900360200190f35b6100b0600480360360208110156100a957600080fd5b5035610127565b604080516001600160a01b039092168252519081900360200190f35b6100b0600480360360208110156100e257600080fd5b5035610142565b60018054810190819055600090815260208190526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b60015481565b6000602081905290815260409020546001600160a01b031681565b6000908152602081905260409020546001600160a01b03169056fea265627a7a7231582082b365a9d242a985d8a4f09f70312a96fc3e7540b66150307140ae8203e1284d64736f6c634300050f0032";
