/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Signer} from "ethers";
import {Provider, TransactionRequest} from "@ethersproject/providers";
import {Contract, ContractFactory, Overrides} from "@ethersproject/contracts";

import {SubtreeQueue} from "./SubtreeQueue";

export class SubtreeQueueFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<SubtreeQueue> {
    return super.deploy(overrides || {}) as Promise<SubtreeQueue>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SubtreeQueue {
    return super.attach(address) as SubtreeQueue;
  }
  connect(signer: Signer): SubtreeQueueFactory {
    return super.connect(signer) as SubtreeQueueFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SubtreeQueue {
    return new Contract(address, _abi, signerOrProvider) as SubtreeQueue;
  }
}

const _abi = [
  {
    constant: true,
    inputs: [],
    name: "back",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "front",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "queue",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  }
];

const _bytecode =
  "0x608060405260018055600060025534801561001957600080fd5b50610133806100296000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80638dde0840146041578063ba75bbd814605b578063ddf0b009146061575b600080fd5b60476070565b6040516052919060cd565b60405180910390f35b60476076565b6047606c366004609d565b607c565b60025481565b60015481565b60006020819052908152604090205481565b803560978160dc565b92915050565b60006020828403121560ae57600080fd5b600060b88484608e565b949350505050565b60c78160d9565b82525050565b602081016097828460c0565b90565b60e38160d9565b811460ed57600080fd5b5056fea365627a7a723158207e6659b20bfd93c3341a85a98122f5a8875d78213e198da1536a0eb1e0ef95c56c6578706572696d656e74616cf564736f6c634300050f0040";
