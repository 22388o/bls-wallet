/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";

interface FrontendUtilitiesInterface extends ethers.utils.Interface {
  functions: {
    "accountRegistry()": FunctionFragment;
    "deposit(uint256[4],uint256,uint256)": FunctionFragment;
    "depositManager()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accountRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositManager",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "accountRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositManager",
    data: BytesLike
  ): Result;

  events: {};
}

export class FrontendUtilities extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FrontendUtilitiesInterface;

  functions: {
    accountRegistry(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "accountRegistry()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    deposit(
      pubkey: BigNumberish[],
      amount: BigNumberish,
      tokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256[4],uint256,uint256)"(
      pubkey: BigNumberish[],
      amount: BigNumberish,
      tokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "depositManager()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  accountRegistry(overrides?: CallOverrides): Promise<string>;

  "accountRegistry()"(overrides?: CallOverrides): Promise<string>;

  deposit(
    pubkey: BigNumberish[],
    amount: BigNumberish,
    tokenID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256[4],uint256,uint256)"(
    pubkey: BigNumberish[],
    amount: BigNumberish,
    tokenID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositManager(overrides?: CallOverrides): Promise<string>;

  "depositManager()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    accountRegistry(overrides?: CallOverrides): Promise<string>;

    "accountRegistry()"(overrides?: CallOverrides): Promise<string>;

    deposit(
      pubkey: BigNumberish[],
      amount: BigNumberish,
      tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256[4],uint256,uint256)"(
      pubkey: BigNumberish[],
      amount: BigNumberish,
      tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositManager(overrides?: CallOverrides): Promise<string>;

    "depositManager()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    accountRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "accountRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      pubkey: BigNumberish[],
      amount: BigNumberish,
      tokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(uint256[4],uint256,uint256)"(
      pubkey: BigNumberish[],
      amount: BigNumberish,
      tokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositManager(overrides?: CallOverrides): Promise<BigNumber>;

    "depositManager()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accountRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "accountRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      pubkey: BigNumberish[],
      amount: BigNumberish,
      tokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256[4],uint256,uint256)"(
      pubkey: BigNumberish[],
      amount: BigNumberish,
      tokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "depositManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
