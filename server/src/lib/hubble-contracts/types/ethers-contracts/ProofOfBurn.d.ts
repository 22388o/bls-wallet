/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides
} from "@ethersproject/contracts";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";

interface ProofOfBurnInterface extends ethers.utils.Interface {
  functions: {
    "coordinator()": FunctionFragment;
    "getProposer()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "coordinator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposer",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "coordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposer",
    data: BytesLike
  ): Result;

  events: {};
}

export class ProofOfBurn extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ProofOfBurnInterface;

  functions: {
    coordinator(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "coordinator()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getProposer(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getProposer()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  coordinator(overrides?: CallOverrides): Promise<string>;

  "coordinator()"(overrides?: CallOverrides): Promise<string>;

  getProposer(overrides?: CallOverrides): Promise<string>;

  "getProposer()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    coordinator(overrides?: CallOverrides): Promise<string>;

    "coordinator()"(overrides?: CallOverrides): Promise<string>;

    getProposer(overrides?: CallOverrides): Promise<string>;

    "getProposer()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    coordinator(overrides?: CallOverrides): Promise<BigNumber>;

    "coordinator()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProposer(overrides?: CallOverrides): Promise<BigNumber>;

    "getProposer()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    coordinator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "coordinator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProposer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getProposer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
