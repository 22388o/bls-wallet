/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides
} from "@ethersproject/contracts";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";

interface TestTypesInterface extends ethers.utils.Interface {
  functions: {
    "decodeMeta(bytes32)": FunctionFragment;
    "encodeMeta(uint256,uint256,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "decodeMeta",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeMeta",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "decodeMeta", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "encodeMeta", data: BytesLike): Result;

  events: {};
}

export class TestTypes extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TestTypesInterface;

  functions: {
    decodeMeta(
      meta: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      batchType: BigNumber;
      size: BigNumber;
      committer: string;
      finaliseOn: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: BigNumber;
    }>;

    "decodeMeta(bytes32)"(
      meta: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      batchType: BigNumber;
      size: BigNumber;
      committer: string;
      finaliseOn: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: BigNumber;
    }>;

    encodeMeta(
      batchType: BigNumberish,
      commitmentLength: BigNumberish,
      committer: string,
      finaliseOn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "encodeMeta(uint256,uint256,address,uint256)"(
      batchType: BigNumberish,
      commitmentLength: BigNumberish,
      committer: string,
      finaliseOn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  decodeMeta(
    meta: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    batchType: BigNumber;
    size: BigNumber;
    committer: string;
    finaliseOn: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: BigNumber;
  }>;

  "decodeMeta(bytes32)"(
    meta: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    batchType: BigNumber;
    size: BigNumber;
    committer: string;
    finaliseOn: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: BigNumber;
  }>;

  encodeMeta(
    batchType: BigNumberish,
    commitmentLength: BigNumberish,
    committer: string,
    finaliseOn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "encodeMeta(uint256,uint256,address,uint256)"(
    batchType: BigNumberish,
    commitmentLength: BigNumberish,
    committer: string,
    finaliseOn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    decodeMeta(
      meta: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      batchType: BigNumber;
      size: BigNumber;
      committer: string;
      finaliseOn: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: BigNumber;
    }>;

    "decodeMeta(bytes32)"(
      meta: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      batchType: BigNumber;
      size: BigNumber;
      committer: string;
      finaliseOn: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: BigNumber;
    }>;

    encodeMeta(
      batchType: BigNumberish,
      commitmentLength: BigNumberish,
      committer: string,
      finaliseOn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "encodeMeta(uint256,uint256,address,uint256)"(
      batchType: BigNumberish,
      commitmentLength: BigNumberish,
      committer: string,
      finaliseOn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    decodeMeta(meta: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "decodeMeta(bytes32)"(
      meta: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeMeta(
      batchType: BigNumberish,
      commitmentLength: BigNumberish,
      committer: string,
      finaliseOn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "encodeMeta(uint256,uint256,address,uint256)"(
      batchType: BigNumberish,
      commitmentLength: BigNumberish,
      committer: string,
      finaliseOn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decodeMeta(
      meta: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeMeta(bytes32)"(
      meta: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeMeta(
      batchType: BigNumberish,
      commitmentLength: BigNumberish,
      committer: string,
      finaliseOn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "encodeMeta(uint256,uint256,address,uint256)"(
      batchType: BigNumberish,
      commitmentLength: BigNumberish,
      committer: string,
      finaliseOn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
