/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";

interface VaultInterface extends ethers.utils.Interface {
  functions: {
    "isBatchApproved(uint256)": FunctionFragment;
    "requestApproval(uint256,tuple)": FunctionFragment;
    "rollup()": FunctionFragment;
    "setRollupAddress(address)": FunctionFragment;
    "spokes()": FunctionFragment;
    "tokenRegistry()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "isBatchApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestApproval",
    values: [
      BigNumberish,
      {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "rollup", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setRollupAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "spokes", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenRegistry",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "isBatchApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rollup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRollupAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "spokes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenRegistry",
    data: BytesLike
  ): Result;

  events: {};
}

export class Vault extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: VaultInterface;

  functions: {
    isBatchApproved(
      batchID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isBatchApproved(uint256)"(
      batchID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    requestApproval(
      batchID: BigNumberish,
      commitmentMP: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "requestApproval(uint256,tuple)"(
      batchID: BigNumberish,
      commitmentMP: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rollup(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "rollup()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setRollupAddress(
      _rollup: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRollupAddress(address)"(
      _rollup: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    spokes(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "spokes()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    tokenRegistry(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenRegistry()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  isBatchApproved(
    batchID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isBatchApproved(uint256)"(
    batchID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  requestApproval(
    batchID: BigNumberish,
    commitmentMP: {
      commitment: {
        stateRoot: BytesLike;
        body: {
          accountRoot: BytesLike;
          signature: BigNumberish[];
          spokeID: BigNumberish;
          withdrawRoot: BytesLike;
          tokenID: BigNumberish;
          amount: BigNumberish;
          feeReceiver: BigNumberish;
          txs: BytesLike;
        };
      };
      path: BigNumberish;
      witness: BytesLike[];
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "requestApproval(uint256,tuple)"(
    batchID: BigNumberish,
    commitmentMP: {
      commitment: {
        stateRoot: BytesLike;
        body: {
          accountRoot: BytesLike;
          signature: BigNumberish[];
          spokeID: BigNumberish;
          withdrawRoot: BytesLike;
          tokenID: BigNumberish;
          amount: BigNumberish;
          feeReceiver: BigNumberish;
          txs: BytesLike;
        };
      };
      path: BigNumberish;
      witness: BytesLike[];
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rollup(overrides?: CallOverrides): Promise<string>;

  "rollup()"(overrides?: CallOverrides): Promise<string>;

  setRollupAddress(
    _rollup: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRollupAddress(address)"(
    _rollup: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  spokes(overrides?: CallOverrides): Promise<string>;

  "spokes()"(overrides?: CallOverrides): Promise<string>;

  tokenRegistry(overrides?: CallOverrides): Promise<string>;

  "tokenRegistry()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    isBatchApproved(
      batchID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isBatchApproved(uint256)"(
      batchID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    requestApproval(
      batchID: BigNumberish,
      commitmentMP: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "requestApproval(uint256,tuple)"(
      batchID: BigNumberish,
      commitmentMP: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    rollup(overrides?: CallOverrides): Promise<string>;

    "rollup()"(overrides?: CallOverrides): Promise<string>;

    setRollupAddress(_rollup: string, overrides?: CallOverrides): Promise<void>;

    "setRollupAddress(address)"(
      _rollup: string,
      overrides?: CallOverrides
    ): Promise<void>;

    spokes(overrides?: CallOverrides): Promise<string>;

    "spokes()"(overrides?: CallOverrides): Promise<string>;

    tokenRegistry(overrides?: CallOverrides): Promise<string>;

    "tokenRegistry()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    isBatchApproved(
      batchID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isBatchApproved(uint256)"(
      batchID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestApproval(
      batchID: BigNumberish,
      commitmentMP: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "requestApproval(uint256,tuple)"(
      batchID: BigNumberish,
      commitmentMP: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    rollup(overrides?: CallOverrides): Promise<BigNumber>;

    "rollup()"(overrides?: CallOverrides): Promise<BigNumber>;

    setRollupAddress(
      _rollup: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRollupAddress(address)"(
      _rollup: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    spokes(overrides?: CallOverrides): Promise<BigNumber>;

    "spokes()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    isBatchApproved(
      batchID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isBatchApproved(uint256)"(
      batchID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestApproval(
      batchID: BigNumberish,
      commitmentMP: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "requestApproval(uint256,tuple)"(
      batchID: BigNumberish,
      commitmentMP: {
        commitment: {
          stateRoot: BytesLike;
          body: {
            accountRoot: BytesLike;
            signature: BigNumberish[];
            spokeID: BigNumberish;
            withdrawRoot: BytesLike;
            tokenID: BigNumberish;
            amount: BigNumberish;
            feeReceiver: BigNumberish;
            txs: BytesLike;
          };
        };
        path: BigNumberish;
        witness: BytesLike[];
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rollup(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rollup()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRollupAddress(
      _rollup: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRollupAddress(address)"(
      _rollup: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    spokes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "spokes()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenRegistry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
