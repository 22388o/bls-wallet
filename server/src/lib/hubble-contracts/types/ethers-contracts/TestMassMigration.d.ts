/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides
} from "@ethersproject/contracts";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";

interface TestMassMigrationInterface extends ethers.utils.Interface {
  functions: {
    "checkSignature(uint256[2],tuple,bytes32,bytes32,bytes32,uint256,bytes)": FunctionFragment;
    "processMassMigrationCommit(bytes32,uint256,tuple,tuple[])": FunctionFragment;
    "testCheckSignature(uint256[2],tuple,bytes32,bytes32,bytes32,uint256,bytes)": FunctionFragment;
    "testProcessMassMigrationCommit(bytes32,uint256,tuple,tuple[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "checkSignature",
    values: [
      BigNumberish[],
      {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "processMassMigrationCommit",
    values: [
      BytesLike,
      BigNumberish,
      {
        accountRoot: BytesLike;
        signature: BigNumberish[];
        spokeID: BigNumberish;
        withdrawRoot: BytesLike;
        tokenID: BigNumberish;
        amount: BigNumberish;
        feeReceiver: BigNumberish;
        txs: BytesLike;
      },
      {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testCheckSignature",
    values: [
      BigNumberish[],
      {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testProcessMassMigrationCommit",
    values: [
      BytesLike,
      BigNumberish,
      {
        accountRoot: BytesLike;
        signature: BigNumberish[];
        spokeID: BigNumberish;
        withdrawRoot: BytesLike;
        tokenID: BigNumberish;
        amount: BigNumberish;
        feeReceiver: BigNumberish;
        txs: BytesLike;
      },
      {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processMassMigrationCommit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCheckSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testProcessMassMigrationCommit",
    data: BytesLike
  ): Result;

  events: {};
}

export class TestMassMigration extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TestMassMigrationInterface;

  functions: {
    checkSignature(
      signature: BigNumberish[],
      proof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      stateRoot: BytesLike,
      accountRoot: BytesLike,
      domain: BytesLike,
      spokeID: BigNumberish,
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "checkSignature(uint256[2],tuple,bytes32,bytes32,bytes32,uint256,bytes)"(
      signature: BigNumberish[],
      proof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      stateRoot: BytesLike,
      accountRoot: BytesLike,
      domain: BytesLike,
      spokeID: BigNumberish,
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    processMassMigrationCommit(
      stateRoot: BytesLike,
      maxTxSize: BigNumberish,
      committed: {
        accountRoot: BytesLike;
        signature: BigNumberish[];
        spokeID: BigNumberish;
        withdrawRoot: BytesLike;
        tokenID: BigNumberish;
        amount: BigNumberish;
        feeReceiver: BigNumberish;
        txs: BytesLike;
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<{
      result: number;
      0: string;
      1: number;
    }>;

    "processMassMigrationCommit(bytes32,uint256,tuple,tuple[])"(
      stateRoot: BytesLike,
      maxTxSize: BigNumberish,
      committed: {
        accountRoot: BytesLike;
        signature: BigNumberish[];
        spokeID: BigNumberish;
        withdrawRoot: BytesLike;
        tokenID: BigNumberish;
        amount: BigNumberish;
        feeReceiver: BigNumberish;
        txs: BytesLike;
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<{
      result: number;
      0: string;
      1: number;
    }>;

    testCheckSignature(
      signature: BigNumberish[],
      proof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      stateRoot: BytesLike,
      accountRoot: BytesLike,
      domain: BytesLike,
      spokeID: BigNumberish,
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      gasCost: BigNumber;
      result: number;
      0: BigNumber;
      1: number;
    }>;

    "testCheckSignature(uint256[2],tuple,bytes32,bytes32,bytes32,uint256,bytes)"(
      signature: BigNumberish[],
      proof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      stateRoot: BytesLike,
      accountRoot: BytesLike,
      domain: BytesLike,
      spokeID: BigNumberish,
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      gasCost: BigNumber;
      result: number;
      0: BigNumber;
      1: number;
    }>;

    testProcessMassMigrationCommit(
      stateRoot: BytesLike,
      maxTxSize: BigNumberish,
      commitmentBody: {
        accountRoot: BytesLike;
        signature: BigNumberish[];
        spokeID: BigNumberish;
        withdrawRoot: BytesLike;
        tokenID: BigNumberish;
        amount: BigNumberish;
        feeReceiver: BigNumberish;
        txs: BytesLike;
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<{
      gasCost: BigNumber;
      0: BigNumber;
      1: string;
      2: number;
    }>;

    "testProcessMassMigrationCommit(bytes32,uint256,tuple,tuple[])"(
      stateRoot: BytesLike,
      maxTxSize: BigNumberish,
      commitmentBody: {
        accountRoot: BytesLike;
        signature: BigNumberish[];
        spokeID: BigNumberish;
        withdrawRoot: BytesLike;
        tokenID: BigNumberish;
        amount: BigNumberish;
        feeReceiver: BigNumberish;
        txs: BytesLike;
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<{
      gasCost: BigNumber;
      0: BigNumber;
      1: string;
      2: number;
    }>;
  };

  checkSignature(
    signature: BigNumberish[],
    proof: {
      states: {
        pubkeyID: BigNumberish;
        tokenID: BigNumberish;
        balance: BigNumberish;
        nonce: BigNumberish;
      }[];
      stateWitnesses: BytesLike[][];
      pubkeys: BigNumberish[][];
      pubkeyWitnesses: BytesLike[][];
    },
    stateRoot: BytesLike,
    accountRoot: BytesLike,
    domain: BytesLike,
    spokeID: BigNumberish,
    txs: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  "checkSignature(uint256[2],tuple,bytes32,bytes32,bytes32,uint256,bytes)"(
    signature: BigNumberish[],
    proof: {
      states: {
        pubkeyID: BigNumberish;
        tokenID: BigNumberish;
        balance: BigNumberish;
        nonce: BigNumberish;
      }[];
      stateWitnesses: BytesLike[][];
      pubkeys: BigNumberish[][];
      pubkeyWitnesses: BytesLike[][];
    },
    stateRoot: BytesLike,
    accountRoot: BytesLike,
    domain: BytesLike,
    spokeID: BigNumberish,
    txs: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  processMassMigrationCommit(
    stateRoot: BytesLike,
    maxTxSize: BigNumberish,
    committed: {
      accountRoot: BytesLike;
      signature: BigNumberish[];
      spokeID: BigNumberish;
      withdrawRoot: BytesLike;
      tokenID: BigNumberish;
      amount: BigNumberish;
      feeReceiver: BigNumberish;
      txs: BytesLike;
    },
    proofs: {
      state: {
        pubkeyID: BigNumberish;
        tokenID: BigNumberish;
        balance: BigNumberish;
        nonce: BigNumberish;
      };
      witness: BytesLike[];
    }[],
    overrides?: CallOverrides
  ): Promise<{
    result: number;
    0: string;
    1: number;
  }>;

  "processMassMigrationCommit(bytes32,uint256,tuple,tuple[])"(
    stateRoot: BytesLike,
    maxTxSize: BigNumberish,
    committed: {
      accountRoot: BytesLike;
      signature: BigNumberish[];
      spokeID: BigNumberish;
      withdrawRoot: BytesLike;
      tokenID: BigNumberish;
      amount: BigNumberish;
      feeReceiver: BigNumberish;
      txs: BytesLike;
    },
    proofs: {
      state: {
        pubkeyID: BigNumberish;
        tokenID: BigNumberish;
        balance: BigNumberish;
        nonce: BigNumberish;
      };
      witness: BytesLike[];
    }[],
    overrides?: CallOverrides
  ): Promise<{
    result: number;
    0: string;
    1: number;
  }>;

  testCheckSignature(
    signature: BigNumberish[],
    proof: {
      states: {
        pubkeyID: BigNumberish;
        tokenID: BigNumberish;
        balance: BigNumberish;
        nonce: BigNumberish;
      }[];
      stateWitnesses: BytesLike[][];
      pubkeys: BigNumberish[][];
      pubkeyWitnesses: BytesLike[][];
    },
    stateRoot: BytesLike,
    accountRoot: BytesLike,
    domain: BytesLike,
    spokeID: BigNumberish,
    txs: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    gasCost: BigNumber;
    result: number;
    0: BigNumber;
    1: number;
  }>;

  "testCheckSignature(uint256[2],tuple,bytes32,bytes32,bytes32,uint256,bytes)"(
    signature: BigNumberish[],
    proof: {
      states: {
        pubkeyID: BigNumberish;
        tokenID: BigNumberish;
        balance: BigNumberish;
        nonce: BigNumberish;
      }[];
      stateWitnesses: BytesLike[][];
      pubkeys: BigNumberish[][];
      pubkeyWitnesses: BytesLike[][];
    },
    stateRoot: BytesLike,
    accountRoot: BytesLike,
    domain: BytesLike,
    spokeID: BigNumberish,
    txs: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    gasCost: BigNumber;
    result: number;
    0: BigNumber;
    1: number;
  }>;

  testProcessMassMigrationCommit(
    stateRoot: BytesLike,
    maxTxSize: BigNumberish,
    commitmentBody: {
      accountRoot: BytesLike;
      signature: BigNumberish[];
      spokeID: BigNumberish;
      withdrawRoot: BytesLike;
      tokenID: BigNumberish;
      amount: BigNumberish;
      feeReceiver: BigNumberish;
      txs: BytesLike;
    },
    proofs: {
      state: {
        pubkeyID: BigNumberish;
        tokenID: BigNumberish;
        balance: BigNumberish;
        nonce: BigNumberish;
      };
      witness: BytesLike[];
    }[],
    overrides?: CallOverrides
  ): Promise<{
    gasCost: BigNumber;
    0: BigNumber;
    1: string;
    2: number;
  }>;

  "testProcessMassMigrationCommit(bytes32,uint256,tuple,tuple[])"(
    stateRoot: BytesLike,
    maxTxSize: BigNumberish,
    commitmentBody: {
      accountRoot: BytesLike;
      signature: BigNumberish[];
      spokeID: BigNumberish;
      withdrawRoot: BytesLike;
      tokenID: BigNumberish;
      amount: BigNumberish;
      feeReceiver: BigNumberish;
      txs: BytesLike;
    },
    proofs: {
      state: {
        pubkeyID: BigNumberish;
        tokenID: BigNumberish;
        balance: BigNumberish;
        nonce: BigNumberish;
      };
      witness: BytesLike[];
    }[],
    overrides?: CallOverrides
  ): Promise<{
    gasCost: BigNumber;
    0: BigNumber;
    1: string;
    2: number;
  }>;

  callStatic: {
    checkSignature(
      signature: BigNumberish[],
      proof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      stateRoot: BytesLike,
      accountRoot: BytesLike,
      domain: BytesLike,
      spokeID: BigNumberish,
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    "checkSignature(uint256[2],tuple,bytes32,bytes32,bytes32,uint256,bytes)"(
      signature: BigNumberish[],
      proof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      stateRoot: BytesLike,
      accountRoot: BytesLike,
      domain: BytesLike,
      spokeID: BigNumberish,
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    processMassMigrationCommit(
      stateRoot: BytesLike,
      maxTxSize: BigNumberish,
      committed: {
        accountRoot: BytesLike;
        signature: BigNumberish[];
        spokeID: BigNumberish;
        withdrawRoot: BytesLike;
        tokenID: BigNumberish;
        amount: BigNumberish;
        feeReceiver: BigNumberish;
        txs: BytesLike;
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<{
      result: number;
      0: string;
      1: number;
    }>;

    "processMassMigrationCommit(bytes32,uint256,tuple,tuple[])"(
      stateRoot: BytesLike,
      maxTxSize: BigNumberish,
      committed: {
        accountRoot: BytesLike;
        signature: BigNumberish[];
        spokeID: BigNumberish;
        withdrawRoot: BytesLike;
        tokenID: BigNumberish;
        amount: BigNumberish;
        feeReceiver: BigNumberish;
        txs: BytesLike;
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<{
      result: number;
      0: string;
      1: number;
    }>;

    testCheckSignature(
      signature: BigNumberish[],
      proof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      stateRoot: BytesLike,
      accountRoot: BytesLike,
      domain: BytesLike,
      spokeID: BigNumberish,
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      gasCost: BigNumber;
      result: number;
      0: BigNumber;
      1: number;
    }>;

    "testCheckSignature(uint256[2],tuple,bytes32,bytes32,bytes32,uint256,bytes)"(
      signature: BigNumberish[],
      proof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      stateRoot: BytesLike,
      accountRoot: BytesLike,
      domain: BytesLike,
      spokeID: BigNumberish,
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      gasCost: BigNumber;
      result: number;
      0: BigNumber;
      1: number;
    }>;

    testProcessMassMigrationCommit(
      stateRoot: BytesLike,
      maxTxSize: BigNumberish,
      commitmentBody: {
        accountRoot: BytesLike;
        signature: BigNumberish[];
        spokeID: BigNumberish;
        withdrawRoot: BytesLike;
        tokenID: BigNumberish;
        amount: BigNumberish;
        feeReceiver: BigNumberish;
        txs: BytesLike;
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<{
      gasCost: BigNumber;
      0: BigNumber;
      1: string;
      2: number;
    }>;

    "testProcessMassMigrationCommit(bytes32,uint256,tuple,tuple[])"(
      stateRoot: BytesLike,
      maxTxSize: BigNumberish,
      commitmentBody: {
        accountRoot: BytesLike;
        signature: BigNumberish[];
        spokeID: BigNumberish;
        withdrawRoot: BytesLike;
        tokenID: BigNumberish;
        amount: BigNumberish;
        feeReceiver: BigNumberish;
        txs: BytesLike;
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<{
      gasCost: BigNumber;
      0: BigNumber;
      1: string;
      2: number;
    }>;
  };

  filters: {};

  estimateGas: {
    checkSignature(
      signature: BigNumberish[],
      proof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      stateRoot: BytesLike,
      accountRoot: BytesLike,
      domain: BytesLike,
      spokeID: BigNumberish,
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkSignature(uint256[2],tuple,bytes32,bytes32,bytes32,uint256,bytes)"(
      signature: BigNumberish[],
      proof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      stateRoot: BytesLike,
      accountRoot: BytesLike,
      domain: BytesLike,
      spokeID: BigNumberish,
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processMassMigrationCommit(
      stateRoot: BytesLike,
      maxTxSize: BigNumberish,
      committed: {
        accountRoot: BytesLike;
        signature: BigNumberish[];
        spokeID: BigNumberish;
        withdrawRoot: BytesLike;
        tokenID: BigNumberish;
        amount: BigNumberish;
        feeReceiver: BigNumberish;
        txs: BytesLike;
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "processMassMigrationCommit(bytes32,uint256,tuple,tuple[])"(
      stateRoot: BytesLike,
      maxTxSize: BigNumberish,
      committed: {
        accountRoot: BytesLike;
        signature: BigNumberish[];
        spokeID: BigNumberish;
        withdrawRoot: BytesLike;
        tokenID: BigNumberish;
        amount: BigNumberish;
        feeReceiver: BigNumberish;
        txs: BytesLike;
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testCheckSignature(
      signature: BigNumberish[],
      proof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      stateRoot: BytesLike,
      accountRoot: BytesLike,
      domain: BytesLike,
      spokeID: BigNumberish,
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "testCheckSignature(uint256[2],tuple,bytes32,bytes32,bytes32,uint256,bytes)"(
      signature: BigNumberish[],
      proof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      stateRoot: BytesLike,
      accountRoot: BytesLike,
      domain: BytesLike,
      spokeID: BigNumberish,
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testProcessMassMigrationCommit(
      stateRoot: BytesLike,
      maxTxSize: BigNumberish,
      commitmentBody: {
        accountRoot: BytesLike;
        signature: BigNumberish[];
        spokeID: BigNumberish;
        withdrawRoot: BytesLike;
        tokenID: BigNumberish;
        amount: BigNumberish;
        feeReceiver: BigNumberish;
        txs: BytesLike;
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "testProcessMassMigrationCommit(bytes32,uint256,tuple,tuple[])"(
      stateRoot: BytesLike,
      maxTxSize: BigNumberish,
      commitmentBody: {
        accountRoot: BytesLike;
        signature: BigNumberish[];
        spokeID: BigNumberish;
        withdrawRoot: BytesLike;
        tokenID: BigNumberish;
        amount: BigNumberish;
        feeReceiver: BigNumberish;
        txs: BytesLike;
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkSignature(
      signature: BigNumberish[],
      proof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      stateRoot: BytesLike,
      accountRoot: BytesLike,
      domain: BytesLike,
      spokeID: BigNumberish,
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkSignature(uint256[2],tuple,bytes32,bytes32,bytes32,uint256,bytes)"(
      signature: BigNumberish[],
      proof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      stateRoot: BytesLike,
      accountRoot: BytesLike,
      domain: BytesLike,
      spokeID: BigNumberish,
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processMassMigrationCommit(
      stateRoot: BytesLike,
      maxTxSize: BigNumberish,
      committed: {
        accountRoot: BytesLike;
        signature: BigNumberish[];
        spokeID: BigNumberish;
        withdrawRoot: BytesLike;
        tokenID: BigNumberish;
        amount: BigNumberish;
        feeReceiver: BigNumberish;
        txs: BytesLike;
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "processMassMigrationCommit(bytes32,uint256,tuple,tuple[])"(
      stateRoot: BytesLike,
      maxTxSize: BigNumberish,
      committed: {
        accountRoot: BytesLike;
        signature: BigNumberish[];
        spokeID: BigNumberish;
        withdrawRoot: BytesLike;
        tokenID: BigNumberish;
        amount: BigNumberish;
        feeReceiver: BigNumberish;
        txs: BytesLike;
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testCheckSignature(
      signature: BigNumberish[],
      proof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      stateRoot: BytesLike,
      accountRoot: BytesLike,
      domain: BytesLike,
      spokeID: BigNumberish,
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "testCheckSignature(uint256[2],tuple,bytes32,bytes32,bytes32,uint256,bytes)"(
      signature: BigNumberish[],
      proof: {
        states: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        }[];
        stateWitnesses: BytesLike[][];
        pubkeys: BigNumberish[][];
        pubkeyWitnesses: BytesLike[][];
      },
      stateRoot: BytesLike,
      accountRoot: BytesLike,
      domain: BytesLike,
      spokeID: BigNumberish,
      txs: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testProcessMassMigrationCommit(
      stateRoot: BytesLike,
      maxTxSize: BigNumberish,
      commitmentBody: {
        accountRoot: BytesLike;
        signature: BigNumberish[];
        spokeID: BigNumberish;
        withdrawRoot: BytesLike;
        tokenID: BigNumberish;
        amount: BigNumberish;
        feeReceiver: BigNumberish;
        txs: BytesLike;
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "testProcessMassMigrationCommit(bytes32,uint256,tuple,tuple[])"(
      stateRoot: BytesLike,
      maxTxSize: BigNumberish,
      commitmentBody: {
        accountRoot: BytesLike;
        signature: BigNumberish[];
        spokeID: BigNumberish;
        withdrawRoot: BytesLike;
        tokenID: BigNumberish;
        amount: BigNumberish;
        feeReceiver: BigNumberish;
        txs: BytesLike;
      },
      proofs: {
        state: {
          pubkeyID: BigNumberish;
          tokenID: BigNumberish;
          balance: BigNumberish;
          nonce: BigNumberish;
        };
        witness: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
