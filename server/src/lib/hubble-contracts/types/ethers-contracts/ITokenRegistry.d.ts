/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";

interface ITokenRegistryInterface extends ethers.utils.Interface {
  functions: {
    "finaliseRegistration(address)": FunctionFragment;
    "requestRegistration(address)": FunctionFragment;
    "safeGetAddress(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "finaliseRegistration",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRegistration",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeGetAddress",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "finaliseRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeGetAddress",
    data: BytesLike
  ): Result;

  events: {
    "RegisteredToken(uint256,address)": EventFragment;
    "RegistrationRequest(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RegisteredToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegistrationRequest"): EventFragment;
}

export class ITokenRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ITokenRegistryInterface;

  functions: {
    finaliseRegistration(
      tokenContract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "finaliseRegistration(address)"(
      tokenContract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    requestRegistration(
      tokenContract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "requestRegistration(address)"(
      tokenContract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    safeGetAddress(
      tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "safeGetAddress(uint256)"(
      tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  finaliseRegistration(
    tokenContract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "finaliseRegistration(address)"(
    tokenContract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  requestRegistration(
    tokenContract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "requestRegistration(address)"(
    tokenContract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  safeGetAddress(
    tokenID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "safeGetAddress(uint256)"(
    tokenID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    finaliseRegistration(
      tokenContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "finaliseRegistration(address)"(
      tokenContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestRegistration(
      tokenContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requestRegistration(address)"(
      tokenContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    safeGetAddress(
      tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "safeGetAddress(uint256)"(
      tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    RegisteredToken(tokenID: null, tokenContract: null): EventFilter;

    RegistrationRequest(tokenContract: null): EventFilter;
  };

  estimateGas: {
    finaliseRegistration(
      tokenContract: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "finaliseRegistration(address)"(
      tokenContract: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    requestRegistration(
      tokenContract: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "requestRegistration(address)"(
      tokenContract: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    safeGetAddress(
      tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeGetAddress(uint256)"(
      tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    finaliseRegistration(
      tokenContract: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "finaliseRegistration(address)"(
      tokenContract: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    requestRegistration(
      tokenContract: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "requestRegistration(address)"(
      tokenContract: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    safeGetAddress(
      tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeGetAddress(uint256)"(
      tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
