/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides
} from "@ethersproject/contracts";
import {BytesLike} from "@ethersproject/bytes";
import {Listener, Provider} from "@ethersproject/providers";
import {FunctionFragment, EventFragment, Result} from "@ethersproject/abi";

interface ParamManagerInterface extends ethers.utils.Interface {
  functions: {
    "_CHAIN_ID()": FunctionFragment;
    "accountRegistry()": FunctionFragment;
    "chainID()": FunctionFragment;
    "chooser()": FunctionFragment;
    "create2Transfer()": FunctionFragment;
    "depositManager()": FunctionFragment;
    "exampleToken()": FunctionFragment;
    "massMigration()": FunctionFragment;
    "merkleUtils()": FunctionFragment;
    "paramManager()": FunctionFragment;
    "rollupCore()": FunctionFragment;
    "spokeRegistry()": FunctionFragment;
    "tokenRegistry()": FunctionFragment;
    "transferSimple()": FunctionFragment;
    "vault()": FunctionFragment;
    "withdrawManager()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "_CHAIN_ID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accountRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "chainID", values?: undefined): string;
  encodeFunctionData(functionFragment: "chooser", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "create2Transfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exampleToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "massMigration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "merkleUtils",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paramManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rollupCore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "spokeRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferSimple",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawManager",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "_CHAIN_ID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accountRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chooser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "create2Transfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exampleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "merkleUtils",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paramManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rollupCore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "spokeRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferSimple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawManager",
    data: BytesLike
  ): Result;

  events: {};
}

export class ParamManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ParamManagerInterface;

  functions: {
    _CHAIN_ID(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "_CHAIN_ID()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    accountRegistry(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "accountRegistry()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    chainID(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "chainID()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    chooser(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "chooser()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    create2Transfer(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "create2Transfer()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    depositManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "depositManager()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    exampleToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "exampleToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    massMigration(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "massMigration()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    merkleUtils(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "merkleUtils()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    paramManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "paramManager()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    rollupCore(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "rollupCore()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    spokeRegistry(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "spokeRegistry()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    tokenRegistry(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenRegistry()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    transferSimple(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "transferSimple()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    vault(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "vault()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    withdrawManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "withdrawManager()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  _CHAIN_ID(overrides?: CallOverrides): Promise<string>;

  "_CHAIN_ID()"(overrides?: CallOverrides): Promise<string>;

  accountRegistry(overrides?: CallOverrides): Promise<string>;

  "accountRegistry()"(overrides?: CallOverrides): Promise<string>;

  chainID(overrides?: CallOverrides): Promise<string>;

  "chainID()"(overrides?: CallOverrides): Promise<string>;

  chooser(overrides?: CallOverrides): Promise<string>;

  "chooser()"(overrides?: CallOverrides): Promise<string>;

  create2Transfer(overrides?: CallOverrides): Promise<string>;

  "create2Transfer()"(overrides?: CallOverrides): Promise<string>;

  depositManager(overrides?: CallOverrides): Promise<string>;

  "depositManager()"(overrides?: CallOverrides): Promise<string>;

  exampleToken(overrides?: CallOverrides): Promise<string>;

  "exampleToken()"(overrides?: CallOverrides): Promise<string>;

  massMigration(overrides?: CallOverrides): Promise<string>;

  "massMigration()"(overrides?: CallOverrides): Promise<string>;

  merkleUtils(overrides?: CallOverrides): Promise<string>;

  "merkleUtils()"(overrides?: CallOverrides): Promise<string>;

  paramManager(overrides?: CallOverrides): Promise<string>;

  "paramManager()"(overrides?: CallOverrides): Promise<string>;

  rollupCore(overrides?: CallOverrides): Promise<string>;

  "rollupCore()"(overrides?: CallOverrides): Promise<string>;

  spokeRegistry(overrides?: CallOverrides): Promise<string>;

  "spokeRegistry()"(overrides?: CallOverrides): Promise<string>;

  tokenRegistry(overrides?: CallOverrides): Promise<string>;

  "tokenRegistry()"(overrides?: CallOverrides): Promise<string>;

  transferSimple(overrides?: CallOverrides): Promise<string>;

  "transferSimple()"(overrides?: CallOverrides): Promise<string>;

  vault(overrides?: CallOverrides): Promise<string>;

  "vault()"(overrides?: CallOverrides): Promise<string>;

  withdrawManager(overrides?: CallOverrides): Promise<string>;

  "withdrawManager()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _CHAIN_ID(overrides?: CallOverrides): Promise<string>;

    "_CHAIN_ID()"(overrides?: CallOverrides): Promise<string>;

    accountRegistry(overrides?: CallOverrides): Promise<string>;

    "accountRegistry()"(overrides?: CallOverrides): Promise<string>;

    chainID(overrides?: CallOverrides): Promise<string>;

    "chainID()"(overrides?: CallOverrides): Promise<string>;

    chooser(overrides?: CallOverrides): Promise<string>;

    "chooser()"(overrides?: CallOverrides): Promise<string>;

    create2Transfer(overrides?: CallOverrides): Promise<string>;

    "create2Transfer()"(overrides?: CallOverrides): Promise<string>;

    depositManager(overrides?: CallOverrides): Promise<string>;

    "depositManager()"(overrides?: CallOverrides): Promise<string>;

    exampleToken(overrides?: CallOverrides): Promise<string>;

    "exampleToken()"(overrides?: CallOverrides): Promise<string>;

    massMigration(overrides?: CallOverrides): Promise<string>;

    "massMigration()"(overrides?: CallOverrides): Promise<string>;

    merkleUtils(overrides?: CallOverrides): Promise<string>;

    "merkleUtils()"(overrides?: CallOverrides): Promise<string>;

    paramManager(overrides?: CallOverrides): Promise<string>;

    "paramManager()"(overrides?: CallOverrides): Promise<string>;

    rollupCore(overrides?: CallOverrides): Promise<string>;

    "rollupCore()"(overrides?: CallOverrides): Promise<string>;

    spokeRegistry(overrides?: CallOverrides): Promise<string>;

    "spokeRegistry()"(overrides?: CallOverrides): Promise<string>;

    tokenRegistry(overrides?: CallOverrides): Promise<string>;

    "tokenRegistry()"(overrides?: CallOverrides): Promise<string>;

    transferSimple(overrides?: CallOverrides): Promise<string>;

    "transferSimple()"(overrides?: CallOverrides): Promise<string>;

    vault(overrides?: CallOverrides): Promise<string>;

    "vault()"(overrides?: CallOverrides): Promise<string>;

    withdrawManager(overrides?: CallOverrides): Promise<string>;

    "withdrawManager()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    _CHAIN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    "_CHAIN_ID()"(overrides?: CallOverrides): Promise<BigNumber>;

    accountRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "accountRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    chainID(overrides?: CallOverrides): Promise<BigNumber>;

    "chainID()"(overrides?: CallOverrides): Promise<BigNumber>;

    chooser(overrides?: CallOverrides): Promise<BigNumber>;

    "chooser()"(overrides?: CallOverrides): Promise<BigNumber>;

    create2Transfer(overrides?: CallOverrides): Promise<BigNumber>;

    "create2Transfer()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositManager(overrides?: CallOverrides): Promise<BigNumber>;

    "depositManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    exampleToken(overrides?: CallOverrides): Promise<BigNumber>;

    "exampleToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    massMigration(overrides?: CallOverrides): Promise<BigNumber>;

    "massMigration()"(overrides?: CallOverrides): Promise<BigNumber>;

    merkleUtils(overrides?: CallOverrides): Promise<BigNumber>;

    "merkleUtils()"(overrides?: CallOverrides): Promise<BigNumber>;

    paramManager(overrides?: CallOverrides): Promise<BigNumber>;

    "paramManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    rollupCore(overrides?: CallOverrides): Promise<BigNumber>;

    "rollupCore()"(overrides?: CallOverrides): Promise<BigNumber>;

    spokeRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "spokeRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferSimple(overrides?: CallOverrides): Promise<BigNumber>;

    "transferSimple()"(overrides?: CallOverrides): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    "vault()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawManager(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawManager()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _CHAIN_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_CHAIN_ID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "accountRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "chainID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chooser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "chooser()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    create2Transfer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "create2Transfer()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "depositManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exampleToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "exampleToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    massMigration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "massMigration()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    merkleUtils(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "merkleUtils()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paramManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paramManager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rollupCore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rollupCore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    spokeRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "spokeRegistry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenRegistry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferSimple(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "transferSimple()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "withdrawManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
