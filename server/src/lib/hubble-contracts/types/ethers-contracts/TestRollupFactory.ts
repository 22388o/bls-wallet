/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Signer, BigNumberish} from "ethers";
import {Provider, TransactionRequest} from "@ethersproject/providers";
import {Contract, ContractFactory, Overrides} from "@ethersproject/contracts";

import {TestRollup} from "./TestRollup";

export class TestRollupFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _depositManager: string,
    stakeAmount: BigNumberish,
    blocksToFinalise: BigNumberish,
    minGasLeft: BigNumberish,
    overrides?: Overrides
  ): Promise<TestRollup> {
    return super.deploy(
      _depositManager,
      stakeAmount,
      blocksToFinalise,
      minGasLeft,
      overrides || {}
    ) as Promise<TestRollup>;
  }
  getDeployTransaction(
    _depositManager: string,
    stakeAmount: BigNumberish,
    blocksToFinalise: BigNumberish,
    minGasLeft: BigNumberish,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(
      _depositManager,
      stakeAmount,
      blocksToFinalise,
      minGasLeft,
      overrides || {}
    );
  }
  attach(address: string): TestRollup {
    return super.attach(address) as TestRollup;
  }
  connect(signer: Signer): TestRollupFactory {
    return super.connect(signer) as TestRollupFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestRollup {
    return new Contract(address, _abi, signerOrProvider) as TestRollup;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IDepositManager",
        name: "_depositManager",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "stakeAmount",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "blocksToFinalise",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "minGasLeft",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "batchID",
        type: "uint256"
      }
    ],
    name: "BatchRollback",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "committer",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "index",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "enum Types.Usage",
        name: "batchType",
        type: "uint8"
      }
    ],
    name: "NewBatch",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "totalBatchesSlashed",
        type: "uint256"
      }
    ],
    name: "RollbackFinalisation",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "committed",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "batchID",
        type: "uint256"
      }
    ],
    name: "StakeWithdraw",
    type: "event"
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "batches",
    outputs: [
      {
        internalType: "bytes32",
        name: "commitmentRoot",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "meta",
        type: "bytes32"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "chooser",
    outputs: [
      {
        internalType: "contract Chooser",
        name: "",
        type: "address"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "depositManager",
    outputs: [
      {
        internalType: "contract IDepositManager",
        name: "",
        type: "address"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "deposits",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "uint256",
        name: "batchID",
        type: "uint256"
      }
    ],
    name: "getBatch",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "commitmentRoot",
            type: "bytes32"
          },
          {
            internalType: "bytes32",
            name: "meta",
            type: "bytes32"
          }
        ],
        internalType: "struct Types.Batch",
        name: "batch",
        type: "tuple"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "invalidBatchMarker",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [],
    name: "keepRollingBack",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "nextBatchID",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "paramBlocksToFinalise",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "paramMaxTxsPerCommit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "paramMinGasLeft",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "paramStakeAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "uint256",
        name: "minGasLeft",
        type: "uint256"
      }
    ],
    name: "setMinGasLeft",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "bytes32",
        name: "depositSubTreeRoot",
        type: "bytes32"
      }
    ],
    name: "submitDeposits",
    outputs: [],
    payable: true,
    stateMutability: "payable",
    type: "function"
  },
  {
    constant: false,
    inputs: [],
    name: "submitDummyBatch",
    outputs: [],
    payable: true,
    stateMutability: "payable",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "uint256",
        name: "batchID",
        type: "uint256"
      }
    ],
    name: "testRollback",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "uint256",
        name: "batchID",
        type: "uint256"
      }
    ],
    name: "withdrawStake",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "withdrawalBitmap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  }
];

const _bytecode =
  "";
