/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Signer} from "ethers";
import {Provider, TransactionRequest} from "@ethersproject/providers";
import {Contract, ContractFactory, Overrides} from "@ethersproject/contracts";

import {Parameters} from "./Parameters";

export class ParametersFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<Parameters> {
    return super.deploy(overrides || {}) as Promise<Parameters>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Parameters {
    return super.attach(address) as Parameters;
  }
  connect(signer: Signer): ParametersFactory {
    return super.connect(signer) as ParametersFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Parameters {
    return new Contract(address, _abi, signerOrProvider) as Parameters;
  }
}

const _abi = [
  {
    constant: true,
    inputs: [],
    name: "paramBlocksToFinalise",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "paramMaxTxsPerCommit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "paramMinGasLeft",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "paramStakeAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  }
];

const _bytecode =
  "0x608060405267016345785d8a00006000556000600155612710600255602060035534801561002c57600080fd5b5060c28061003b6000396000f3fe6080604052348015600f57600080fd5b506004361060465760003560e01c806331c2b7db14604b578063ca858d9d146063578063d1b243e2146069578063e42f755414606f575b600080fd5b60516075565b60408051918252519081900360200190f35b6051607b565b60516081565b60516087565b60015481565b60025481565b60005481565b6003548156fea265627a7a72315820ee586997d31f73e565c0edc3b262c1af29bb55c3a797255bd0fb195775b375c864736f6c634300050f0032";
