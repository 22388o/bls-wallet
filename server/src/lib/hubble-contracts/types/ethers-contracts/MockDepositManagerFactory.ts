/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Signer} from "ethers";
import {Provider, TransactionRequest} from "@ethersproject/providers";
import {Contract, ContractFactory, Overrides} from "@ethersproject/contracts";

import {MockDepositManager} from "./MockDepositManager";

export class MockDepositManagerFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<MockDepositManager> {
    return super.deploy(overrides || {}) as Promise<MockDepositManager>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockDepositManager {
    return super.attach(address) as MockDepositManager;
  }
  connect(signer: Signer): MockDepositManagerFactory {
    return super.connect(signer) as MockDepositManagerFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockDepositManager {
    return new Contract(address, _abi, signerOrProvider) as MockDepositManager;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "pubkeyID",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "DepositQueued",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "root",
        type: "bytes32"
      }
    ],
    name: "DepositSubTreeReady",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "subtreeRoot",
        type: "bytes32"
      }
    ],
    name: "EnqueSubtree",
    type: "event"
  },
  {
    constant: false,
    inputs: [],
    name: "dequeueToSubmit",
    outputs: [
      {
        internalType: "bytes32",
        name: "subtreeRoot",
        type: "bytes32"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "bytes32",
        name: "subtreeRoot",
        type: "bytes32"
      }
    ],
    name: "reenqueue",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061015e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063ade000261461003b578063d86ee48d14610050575b600080fd5b61004e6100493660046100be565b61006e565b005b6100586100a8565b60405161006591906100f3565b60405180910390f35b7f89f158dc3ac70c3fa11ca96f6b47a9cdcbd77bb0ff3c9e36fbdd0a493ab4ba988160405161009d91906100f3565b60405180910390a150565b600090565b80356100b881610104565b92915050565b6000602082840312156100d057600080fd5b60006100dc84846100ad565b949350505050565b6100ed81610101565b82525050565b602081016100b882846100e4565b90565b61010d81610101565b811461011857600080fd5b5056fea365627a7a7231582045f19202159474b0c4f2fd5623b0462ac1ddf3e26b909236fb979cb9787c38c66c6578706572696d656e74616cf564736f6c634300050f0040";
